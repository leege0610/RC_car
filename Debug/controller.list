
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006018  08006018  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006020  08006020  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006024  08006024  00016024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000214  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127d8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002540  00000000  00000000  00032878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00034db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00035ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257f5  00000000  00000000  00036a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011503  00000000  00000000  0005c285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1627  00000000  00000000  0006d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014edaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004510  00000000  00000000  0014ee04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f48 	.word	0x08005f48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005f48 	.word	0x08005f48

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <Control>:
extern int16_t duty1;
extern int16_t duty3;
extern int16_t duty4;

CONTROLLER_SIGNAL Control()
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	if(duty1 >= 550 && duty1 <= 950)
 800058c:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <Control+0x13c>)
 800058e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000592:	f240 2225 	movw	r2, #549	; 0x225
 8000596:	4293      	cmp	r3, r2
 8000598:	dd7c      	ble.n	8000694 <Control+0x10c>
 800059a:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <Control+0x13c>)
 800059c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80005a4:	4293      	cmp	r3, r2
 80005a6:	dc75      	bgt.n	8000694 <Control+0x10c>
	{
		if(duty3 >= 550 && duty3 <= 950)
 80005a8:	4b47      	ldr	r3, [pc, #284]	; (80006c8 <Control+0x140>)
 80005aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ae:	f240 2225 	movw	r2, #549	; 0x225
 80005b2:	4293      	cmp	r3, r2
 80005b4:	dd1a      	ble.n	80005ec <Control+0x64>
 80005b6:	4b44      	ldr	r3, [pc, #272]	; (80006c8 <Control+0x140>)
 80005b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005bc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80005c0:	4293      	cmp	r3, r2
 80005c2:	dc13      	bgt.n	80005ec <Control+0x64>
		{
			if(duty4 < 550) return FORWARD;  //FR:정, FL:정, RR:정, RL:정
 80005c4:	4b41      	ldr	r3, [pc, #260]	; (80006cc <Control+0x144>)
 80005c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ca:	f240 2225 	movw	r2, #549	; 0x225
 80005ce:	4293      	cmp	r3, r2
 80005d0:	dc01      	bgt.n	80005d6 <Control+0x4e>
 80005d2:	2300      	movs	r3, #0
 80005d4:	e071      	b.n	80006ba <Control+0x132>
			else if(duty4 > 950) return BACKWARD;  //FR:역, FL:역, RR:역, RL:역
 80005d6:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <Control+0x144>)
 80005d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005dc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80005e0:	4293      	cmp	r3, r2
 80005e2:	dd01      	ble.n	80005e8 <Control+0x60>
 80005e4:	2301      	movs	r3, #1
 80005e6:	e068      	b.n	80006ba <Control+0x132>
			else return STOP;
 80005e8:	230a      	movs	r3, #10
 80005ea:	e066      	b.n	80006ba <Control+0x132>
		}

		else
		{
			if(duty4 >= 550 && duty4 <= 950)
 80005ec:	4b37      	ldr	r3, [pc, #220]	; (80006cc <Control+0x144>)
 80005ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f2:	f240 2225 	movw	r2, #549	; 0x225
 80005f6:	4293      	cmp	r3, r2
 80005f8:	dd18      	ble.n	800062c <Control+0xa4>
 80005fa:	4b34      	ldr	r3, [pc, #208]	; (80006cc <Control+0x144>)
 80005fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000600:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000604:	4293      	cmp	r3, r2
 8000606:	dc11      	bgt.n	800062c <Control+0xa4>
			{
				if(duty3 < 550) return RIGHT;  //FR:역, FL:정, RR:정, RL:역
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <Control+0x140>)
 800060a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060e:	f240 2225 	movw	r2, #549	; 0x225
 8000612:	4293      	cmp	r3, r2
 8000614:	dc01      	bgt.n	800061a <Control+0x92>
 8000616:	2302      	movs	r3, #2
 8000618:	e04f      	b.n	80006ba <Control+0x132>
				else if(duty3 > 950) return LEFT;  //FR:정, FL:역, RR:역, RL:정
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <Control+0x140>)
 800061c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000620:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000624:	4293      	cmp	r3, r2
 8000626:	dd33      	ble.n	8000690 <Control+0x108>
 8000628:	2303      	movs	r3, #3
 800062a:	e046      	b.n	80006ba <Control+0x132>
			}

			else if(duty4 < 550)
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <Control+0x144>)
 800062e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000632:	f240 2225 	movw	r2, #549	; 0x225
 8000636:	4293      	cmp	r3, r2
 8000638:	dc11      	bgt.n	800065e <Control+0xd6>
			{
				if(duty3 < 550) return FR45;  //FR:-, FL:정, RR:정, RL:-
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <Control+0x140>)
 800063c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000640:	f240 2225 	movw	r2, #549	; 0x225
 8000644:	4293      	cmp	r3, r2
 8000646:	dc01      	bgt.n	800064c <Control+0xc4>
 8000648:	2304      	movs	r3, #4
 800064a:	e036      	b.n	80006ba <Control+0x132>
				else if(duty3 > 950) return FL45;  //FR:정, FL:-, RR:-, RL:정
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <Control+0x140>)
 800064e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000652:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000656:	4293      	cmp	r3, r2
 8000658:	dd2e      	ble.n	80006b8 <Control+0x130>
 800065a:	2305      	movs	r3, #5
 800065c:	e02d      	b.n	80006ba <Control+0x132>
			}

			else if(duty4 > 950)
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <Control+0x144>)
 8000660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000664:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000668:	4293      	cmp	r3, r2
 800066a:	dd25      	ble.n	80006b8 <Control+0x130>
			{
				if(duty3 < 550) return BR45;  //FR:-, FL:정, RR:정, RL:-
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <Control+0x140>)
 800066e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000672:	f240 2225 	movw	r2, #549	; 0x225
 8000676:	4293      	cmp	r3, r2
 8000678:	dc01      	bgt.n	800067e <Control+0xf6>
 800067a:	2306      	movs	r3, #6
 800067c:	e01d      	b.n	80006ba <Control+0x132>
				else if(duty3 > 950) return BL45;  //FR:정, FL:-, RR:-, RL:정
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <Control+0x140>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000688:	4293      	cmp	r3, r2
 800068a:	dd15      	ble.n	80006b8 <Control+0x130>
 800068c:	2307      	movs	r3, #7
 800068e:	e014      	b.n	80006ba <Control+0x132>
				if(duty3 < 550) return RIGHT;  //FR:역, FL:정, RR:정, RL:역
 8000690:	bf00      	nop
		if(duty3 >= 550 && duty3 <= 950)
 8000692:	e011      	b.n	80006b8 <Control+0x130>
			}
		}
	}
	else
	{
		if(duty1 < 550) return CW;  //FR:역, FL:정, RR:역, RL:정
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <Control+0x13c>)
 8000696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069a:	f240 2225 	movw	r2, #549	; 0x225
 800069e:	4293      	cmp	r3, r2
 80006a0:	dc01      	bgt.n	80006a6 <Control+0x11e>
 80006a2:	2308      	movs	r3, #8
 80006a4:	e009      	b.n	80006ba <Control+0x132>
		else if(duty1 > 950) return CCW;  //FR:정, FL:역, RR:정, RL:역
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <Control+0x13c>)
 80006a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ac:	f240 32b6 	movw	r2, #950	; 0x3b6
 80006b0:	4293      	cmp	r3, r2
 80006b2:	dd02      	ble.n	80006ba <Control+0x132>
 80006b4:	2309      	movs	r3, #9
 80006b6:	e000      	b.n	80006ba <Control+0x132>
		if(duty3 >= 550 && duty3 <= 950)
 80006b8:	bf00      	nop
	}
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000128 	.word	0x20000128
 80006c8:	2000009a 	.word	0x2000009a
 80006cc:	20000098 	.word	0x20000098

080006d0 <HAL_TIM_PeriodElapsedCallback>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)  //time ++
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d105      	bne.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x1e>
	{

		printf("%d\r\n",tmpSignal);
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80006ea:	f004 fcd7 	bl	800509c <iprintf>
		//printf("\r ch1 : %d, ch2 : %d, ch3 : %d, ch4 : %d           ",duty1, duty2, duty3, duty4);
		//printf("\r control : %d,  throttle :  %d     ",tmpSignal, throttle);
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40001000 	.word	0x40001000
 80006fc:	20000174 	.word	0x20000174
 8000700:	08005f60 	.word	0x08005f60

08000704 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000714:	d129      	bne.n	800076a <HAL_TIM_IC_CaptureCallback+0x66>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000716:	2101      	movs	r1, #1
 8000718:	482b      	ldr	r0, [pc, #172]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800071a:	f001 fe0c 	bl	8002336 <HAL_GPIO_TogglePin>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7f1b      	ldrb	r3, [r3, #28]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d104      	bne.n	8000730 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			TIM2->CNT = 0;
 8000726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
 800072e:	e009      	b.n	8000744 <HAL_TIM_IC_CaptureCallback+0x40>
		}
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7f1b      	ldrb	r3, [r3, #28]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d105      	bne.n	8000744 <HAL_TIM_IC_CaptureCallback+0x40>
		{
			duty1 = TIM2->CCR2;
 8000738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073e:	b21a      	sxth	r2, r3
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000742:	801a      	strh	r2, [r3, #0]
		}

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7f1b      	ldrb	r3, [r3, #28]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d104      	bne.n	8000756 <HAL_TIM_IC_CaptureCallback+0x52>
		{
			TIM2->CNT = 0;
 800074c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
 8000754:	e009      	b.n	800076a <HAL_TIM_IC_CaptureCallback+0x66>
		}
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7f1b      	ldrb	r3, [r3, #28]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <HAL_TIM_IC_CaptureCallback+0x66>
		{
			duty2 = TIM2->CCR4;
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	b21a      	sxth	r2, r3
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000768:	801a      	strh	r2, [r3, #0]
		}
	}

	if(htim->Instance == TIM3)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d125      	bne.n	80007c0 <HAL_TIM_IC_CaptureCallback+0xbc>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000778:	f001 fddd 	bl	8002336 <HAL_GPIO_TogglePin>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7f1b      	ldrb	r3, [r3, #28]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d103      	bne.n	800078c <HAL_TIM_IC_CaptureCallback+0x88>
		{
			TIM3->CNT = 0;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24
 800078a:	e008      	b.n	800079e <HAL_TIM_IC_CaptureCallback+0x9a>
		}
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7f1b      	ldrb	r3, [r3, #28]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d104      	bne.n	800079e <HAL_TIM_IC_CaptureCallback+0x9a>
		{
			duty3 = TIM3->CCR2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000798:	b21a      	sxth	r2, r3
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800079c:	801a      	strh	r2, [r3, #0]
		}

		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7f1b      	ldrb	r3, [r3, #28]
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d103      	bne.n	80007ae <HAL_TIM_IC_CaptureCallback+0xaa>
		{
			TIM3->CNT = 0;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
		{
			duty4 = TIM3->CCR4;
		}
	}
}
 80007ac:	e008      	b.n	80007c0 <HAL_TIM_IC_CaptureCallback+0xbc>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7f1b      	ldrb	r3, [r3, #28]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d104      	bne.n	80007c0 <HAL_TIM_IC_CaptureCallback+0xbc>
			duty4 = TIM3->CCR4;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_TIM_IC_CaptureCallback+0xd8>)
 80007be:	801a      	strh	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020400 	.word	0x40020400
 80007cc:	20000128 	.word	0x20000128
 80007d0:	200001e0 	.word	0x200001e0
 80007d4:	40000400 	.word	0x40000400
 80007d8:	2000009a 	.word	0x2000009a
 80007dc:	20000098 	.word	0x20000098

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f001 fa5e 	bl	8001ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f878 	bl	80008dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 fb86 	bl	8000efc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007f0:	f000 fb5a 	bl	8000ea8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80007f4:	f000 f900 	bl	80009f8 <MX_RTC_Init>
  MX_TIM2_Init();
 80007f8:	f000 f924 	bl	8000a44 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007fc:	f000 f9be 	bl	8000b7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000800:	f000 fa5a 	bl	8000cb8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000804:	f000 faf0 	bl	8000de8 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000808:	f000 fb24 	bl	8000e54 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800080c:	f000 f8d8 	bl	80009c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim2);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000810:	2100      	movs	r1, #0
 8000812:	482b      	ldr	r0, [pc, #172]	; (80008c0 <main+0xe0>)
 8000814:	f002 ffbc 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);// INPUT CAPTURE
 8000818:	2104      	movs	r1, #4
 800081a:	4829      	ldr	r0, [pc, #164]	; (80008c0 <main+0xe0>)
 800081c:	f002 ffb8 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000820:	2108      	movs	r1, #8
 8000822:	4827      	ldr	r0, [pc, #156]	; (80008c0 <main+0xe0>)
 8000824:	f002 ffb4 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000828:	210c      	movs	r1, #12
 800082a:	4825      	ldr	r0, [pc, #148]	; (80008c0 <main+0xe0>)
 800082c:	f002 ffb0 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000830:	2100      	movs	r1, #0
 8000832:	4824      	ldr	r0, [pc, #144]	; (80008c4 <main+0xe4>)
 8000834:	f002 ffac 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);// INPUT CAPTURE
 8000838:	2104      	movs	r1, #4
 800083a:	4822      	ldr	r0, [pc, #136]	; (80008c4 <main+0xe4>)
 800083c:	f002 ffa8 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
 8000840:	2108      	movs	r1, #8
 8000842:	4820      	ldr	r0, [pc, #128]	; (80008c4 <main+0xe4>)
 8000844:	f002 ffa4 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8000848:	210c      	movs	r1, #12
 800084a:	481e      	ldr	r0, [pc, #120]	; (80008c4 <main+0xe4>)
 800084c:	f002 ffa0 	bl	8003790 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000850:	2100      	movs	r1, #0
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <main+0xe8>)
 8000854:	f002 fe0a 	bl	800346c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000858:	2104      	movs	r1, #4
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <main+0xe8>)
 800085c:	f002 fe06 	bl	800346c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000860:	2108      	movs	r1, #8
 8000862:	4819      	ldr	r0, [pc, #100]	; (80008c8 <main+0xe8>)
 8000864:	f002 fe02 	bl	800346c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000868:	210c      	movs	r1, #12
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <main+0xe8>)
 800086c:	f002 fdfe 	bl	800346c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000870:	4816      	ldr	r0, [pc, #88]	; (80008cc <main+0xec>)
 8000872:	f002 fd31 	bl	80032d8 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);  //FR_CW_CCW
 8000876:	2201      	movs	r2, #1
 8000878:	2102      	movs	r1, #2
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <main+0xf0>)
 800087c:	f001 fd42 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);  //FL_CW_CCW
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <main+0xf4>)
 8000888:	f001 fd3c 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);  //RR_CW_CCW
 800088c:	2201      	movs	r2, #1
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <main+0xf4>)
 8000892:	f001 fd37 	bl	8002304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);  //RL_CW_CCW
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <main+0xf4>)
 800089e:	f001 fd31 	bl	8002304 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		tmpSignal = Control();
 80008a2:	f7ff fe71 	bl	8000588 <Control>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <main+0xf8>)
 80008ac:	701a      	strb	r2, [r3, #0]
		Throttle();
 80008ae:	f000 fcbf 	bl	8001230 <Throttle>
		Move(tmpSignal);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <main+0xf8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fc6c 	bl	8001194 <Move>
		tmpSignal = Control();
 80008bc:	e7f1      	b.n	80008a2 <main+0xc2>
 80008be:	bf00      	nop
 80008c0:	200001e4 	.word	0x200001e4
 80008c4:	2000012c 	.word	0x2000012c
 80008c8:	2000009c 	.word	0x2000009c
 80008cc:	20000198 	.word	0x20000198
 80008d0:	40021800 	.word	0x40021800
 80008d4:	40021400 	.word	0x40021400
 80008d8:	20000174 	.word	0x20000174

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b094      	sub	sp, #80	; 0x50
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	2230      	movs	r2, #48	; 0x30
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fbce 	bl	800508c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <SystemClock_Config+0xdc>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <SystemClock_Config+0xdc>)
 800090a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <SystemClock_Config+0xdc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <SystemClock_Config+0xe0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a25      	ldr	r2, [pc, #148]	; (80009bc <SystemClock_Config+0xe0>)
 8000926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <SystemClock_Config+0xe0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000938:	2306      	movs	r3, #6
 800093a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000954:	23b4      	movs	r3, #180	; 0xb4
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095c:	2307      	movs	r3, #7
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fd51 	bl	800240c <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000970:	f000 fc0a 	bl	8001188 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000974:	f001 fcfa 	bl	800236c <HAL_PWREx_EnableOverDrive>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800097e:	f000 fc03 	bl	8001188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2302      	movs	r3, #2
 8000988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800098e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2105      	movs	r1, #5
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 ffab 	bl	80028fc <HAL_RCC_ClockConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009ac:	f000 fbec 	bl	8001188 <Error_Handler>
  }
}
 80009b0:	bf00      	nop
 80009b2:	3750      	adds	r7, #80	; 0x50
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000

080009c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	201c      	movs	r0, #28
 80009ca:	f001 fab8 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009ce:	201c      	movs	r0, #28
 80009d0:	f001 fad1 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	201d      	movs	r0, #29
 80009da:	f001 fab0 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009de:	201d      	movs	r0, #29
 80009e0:	f001 fac9 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2036      	movs	r0, #54	; 0x36
 80009ea:	f001 faa8 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ee:	2036      	movs	r0, #54	; 0x36
 80009f0:	f001 fac1 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_RTC_Init+0x44>)
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <MX_RTC_Init+0x48>)
 8000a00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a0a:	227f      	movs	r2, #127	; 0x7f
 8000a0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_RTC_Init+0x44>)
 8000a28:	f002 fb22 	bl	8003070 <HAL_RTC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a32:	f000 fba9 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000178 	.word	0x20000178
 8000a40:	40002800 	.word	0x40002800

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000a76:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a78:	22b3      	movs	r2, #179	; 0xb3
 8000a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a84:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a96:	4838      	ldr	r0, [pc, #224]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000a98:	f002 fbcf 	bl	800323a <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000aa2:	f000 fb71 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4831      	ldr	r0, [pc, #196]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000ab4:	f003 f9fa 	bl	8003eac <HAL_TIM_ConfigClockSource>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000abe:	f000 fb63 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ac2:	482d      	ldr	r0, [pc, #180]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000ac4:	f002 fe0a 	bl	80036dc <HAL_TIM_IC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ace:	f000 fb5b 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4825      	ldr	r0, [pc, #148]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000ae2:	f003 ff03 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000aec:	f000 fb4c 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	481c      	ldr	r0, [pc, #112]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000b08:	f003 f872 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000b12:	f000 fb39 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b16:	2302      	movs	r3, #2
 8000b18:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000b26:	f003 f863 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b30:	f000 fb2a 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000b44:	f003 f854 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 8000b4e:	f000 fb1b 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b52:	2302      	movs	r3, #2
 8000b54:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b56:	2302      	movs	r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	220c      	movs	r2, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM2_Init+0x134>)
 8000b62:	f003 f845 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8000b6c:	f000 fb0c 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001e4 	.word	0x200001e4

08000b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba6:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000ba8:	4a42      	ldr	r2, [pc, #264]	; (8000cb4 <MX_TIM3_Init+0x138>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 8000bac:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bae:	22b3      	movs	r2, #179	; 0xb3
 8000bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bcc:	4838      	ldr	r0, [pc, #224]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bce:	f002 fb34 	bl	800323a <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000bd8:	f000 fad6 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4831      	ldr	r0, [pc, #196]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bea:	f003 f95f 	bl	8003eac <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000bf4:	f000 fac8 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bf8:	482d      	ldr	r0, [pc, #180]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000bfa:	f002 fd6f 	bl	80036dc <HAL_TIM_IC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c04:	f000 fac0 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4619      	mov	r1, r3
 8000c16:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000c18:	f003 fe68 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000c22:	f000 fab1 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481c      	ldr	r0, [pc, #112]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000c3e:	f002 ffd7 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c48:	f000 fa9e 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c50:	2302      	movs	r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	2204      	movs	r2, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000c5c:	f002 ffc8 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c66:	f000 fa8f 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2208      	movs	r2, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000c7a:	f002 ffb9 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8000c84:	f000 fa80 	bl	8001188 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	220c      	movs	r2, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_TIM3_Init+0x134>)
 8000c98:	f002 ffaa 	bl	8003bf0 <HAL_TIM_IC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8000ca2:	f000 fa71 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000012c 	.word	0x2000012c
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cea:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <MX_TIM4_Init+0x12c>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cf0:	2259      	movs	r2, #89	; 0x59
 8000cf2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d0e:	4834      	ldr	r0, [pc, #208]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d10:	f002 fa93 	bl	800323a <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000d1a:	f000 fa35 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	482d      	ldr	r0, [pc, #180]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d2c:	f003 f8be 	bl	8003eac <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d36:	f000 fa27 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d3c:	f002 fb3c 	bl	80033b8 <HAL_TIM_PWM_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d46:	f000 fa1f 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	4619      	mov	r1, r3
 8000d58:	4821      	ldr	r0, [pc, #132]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d5a:	f003 fdc7 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d64:	f000 fa10 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d68:	2370      	movs	r3, #112	; 0x70
 8000d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4818      	ldr	r0, [pc, #96]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d80:	f002 ffd2 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d8a:	f000 f9fd 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2204      	movs	r2, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000d96:	f002 ffc7 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000da0:	f000 f9f2 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2208      	movs	r2, #8
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000dac:	f002 ffbc 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000db6:	f000 f9e7 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	220c      	movs	r2, #12
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000dc2:	f002 ffb1 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000dcc:	f000 f9dc 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <MX_TIM4_Init+0x128>)
 8000dd2:	f000 fd69 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	; 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000009c 	.word	0x2000009c
 8000de4:	40000800 	.word	0x40000800

08000de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 180-1;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000dfe:	22b3      	movs	r2, #179	; 0xb3
 8000e00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e18:	f002 fa0f 	bl	800323a <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e22:	f000 f9b1 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_TIM6_Init+0x64>)
 8000e34:	f003 fd5a 	bl	80048ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e3e:	f000 f9a3 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000198 	.word	0x20000198
 8000e50:	40001000 	.word	0x40001000

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f003 fdbe 	bl	8004a0c <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f000 f977 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000022c 	.word	0x2000022c
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART3_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART3_UART_Init+0x4c>)
 8000ee0:	f003 fd94 	bl	8004a0c <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f94d 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000e4 	.word	0x200000e4
 8000ef8:	40004800 	.word	0x40004800

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	4b8d      	ldr	r3, [pc, #564]	; (800114c <MX_GPIO_Init+0x250>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a8c      	ldr	r2, [pc, #560]	; (800114c <MX_GPIO_Init+0x250>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b8a      	ldr	r3, [pc, #552]	; (800114c <MX_GPIO_Init+0x250>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	4b86      	ldr	r3, [pc, #536]	; (800114c <MX_GPIO_Init+0x250>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a85      	ldr	r2, [pc, #532]	; (800114c <MX_GPIO_Init+0x250>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b83      	ldr	r3, [pc, #524]	; (800114c <MX_GPIO_Init+0x250>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b7f      	ldr	r3, [pc, #508]	; (800114c <MX_GPIO_Init+0x250>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a7e      	ldr	r2, [pc, #504]	; (800114c <MX_GPIO_Init+0x250>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b7c      	ldr	r3, [pc, #496]	; (800114c <MX_GPIO_Init+0x250>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b78      	ldr	r3, [pc, #480]	; (800114c <MX_GPIO_Init+0x250>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a77      	ldr	r2, [pc, #476]	; (800114c <MX_GPIO_Init+0x250>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b75      	ldr	r3, [pc, #468]	; (800114c <MX_GPIO_Init+0x250>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b71      	ldr	r3, [pc, #452]	; (800114c <MX_GPIO_Init+0x250>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a70      	ldr	r2, [pc, #448]	; (800114c <MX_GPIO_Init+0x250>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b6e      	ldr	r3, [pc, #440]	; (800114c <MX_GPIO_Init+0x250>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b6a      	ldr	r3, [pc, #424]	; (800114c <MX_GPIO_Init+0x250>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a69      	ldr	r2, [pc, #420]	; (800114c <MX_GPIO_Init+0x250>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b67      	ldr	r3, [pc, #412]	; (800114c <MX_GPIO_Init+0x250>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b63      	ldr	r3, [pc, #396]	; (800114c <MX_GPIO_Init+0x250>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a62      	ldr	r2, [pc, #392]	; (800114c <MX_GPIO_Init+0x250>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b60      	ldr	r3, [pc, #384]	; (800114c <MX_GPIO_Init+0x250>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RR_CW_CCW_Pin|RL_CW_CCW_Pin|FL_CW_CCW_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000fdc:	485c      	ldr	r0, [pc, #368]	; (8001150 <MX_GPIO_Init+0x254>)
 8000fde:	f001 f991 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe8:	485a      	ldr	r0, [pc, #360]	; (8001154 <MX_GPIO_Init+0x258>)
 8000fea:	f001 f98b 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, FR_CW_CCW_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2142      	movs	r1, #66	; 0x42
 8000ff2:	4859      	ldr	r0, [pc, #356]	; (8001158 <MX_GPIO_Init+0x25c>)
 8000ff4:	f001 f986 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4853      	ldr	r0, [pc, #332]	; (800115c <MX_GPIO_Init+0x260>)
 8001010:	f000 ffcc 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_CW_CCW_Pin RL_CW_CCW_Pin FL_CW_CCW_Pin */
  GPIO_InitStruct.Pin = RR_CW_CCW_Pin|RL_CW_CCW_Pin|FL_CW_CCW_Pin;
 8001014:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4848      	ldr	r0, [pc, #288]	; (8001150 <MX_GPIO_Init+0x254>)
 800102e:	f000 ffbd 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001032:	2332      	movs	r3, #50	; 0x32
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001042:	230b      	movs	r3, #11
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	4843      	ldr	r0, [pc, #268]	; (800115c <MX_GPIO_Init+0x260>)
 800104e:	f000 ffad 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001052:	2386      	movs	r3, #134	; 0x86
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001062:	230b      	movs	r3, #11
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	483c      	ldr	r0, [pc, #240]	; (8001160 <MX_GPIO_Init+0x264>)
 800106e:	f000 ff9d 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001072:	f244 0381 	movw	r3, #16513	; 0x4081
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4832      	ldr	r0, [pc, #200]	; (8001154 <MX_GPIO_Init+0x258>)
 800108c:	f000 ff8e 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : FR_CW_CCW_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = FR_CW_CCW_Pin|USB_PowerSwitchOn_Pin;
 8001090:	2342      	movs	r3, #66	; 0x42
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_GPIO_Init+0x25c>)
 80010a8:	f000 ff80 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010be:	230b      	movs	r3, #11
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4822      	ldr	r0, [pc, #136]	; (8001154 <MX_GPIO_Init+0x258>)
 80010ca:	f000 ff6f 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	481d      	ldr	r0, [pc, #116]	; (8001158 <MX_GPIO_Init+0x25c>)
 80010e2:	f000 ff63 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010f8:	230a      	movs	r3, #10
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <MX_GPIO_Init+0x264>)
 8001104:	f000 ff52 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4810      	ldr	r0, [pc, #64]	; (8001160 <MX_GPIO_Init+0x264>)
 800111e:	f000 ff45 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001122:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001134:	230b      	movs	r3, #11
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_GPIO_Init+0x25c>)
 8001140:	f000 ff34 	bl	8001fac <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40021400 	.word	0x40021400
 8001154:	40020400 	.word	0x40020400
 8001158:	40021800 	.word	0x40021800
 800115c:	40020800 	.word	0x40020800
 8001160:	40020000 	.word	0x40020000

08001164 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800116c:	1d39      	adds	r1, r7, #4
 800116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001172:	2201      	movs	r2, #1
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <__io_putchar+0x20>)
 8001176:	f003 fc96 	bl	8004aa6 <HAL_UART_Transmit>

  return ch;
 800117a:	687b      	ldr	r3, [r7, #4]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000e4 	.word	0x200000e4

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <Move>:
extern int16_t duty2;
extern int16_t preduty2;
extern TIM_HandleTypeDef htim4;

void Move(CONTROLLER_SIGNAL _signal)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	if(_signal != STOP) Throttle();
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d001      	beq.n	80011a8 <Move+0x14>
 80011a4:	f000 f844 	bl	8001230 <Throttle>

	switch(_signal)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d839      	bhi.n	8001222 <Move+0x8e>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <Move+0x20>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011e1 	.word	0x080011e1
 80011b8:	080011e7 	.word	0x080011e7
 80011bc:	080011ed 	.word	0x080011ed
 80011c0:	080011f3 	.word	0x080011f3
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	080011ff 	.word	0x080011ff
 80011cc:	08001205 	.word	0x08001205
 80011d0:	0800120b 	.word	0x0800120b
 80011d4:	08001211 	.word	0x08001211
 80011d8:	08001217 	.word	0x08001217
 80011dc:	0800121d 	.word	0x0800121d
	{
	case FORWARD:
		Forward();
 80011e0:	f000 f85e 	bl	80012a0 <Forward>
		break;
 80011e4:	e020      	b.n	8001228 <Move+0x94>
	case BACKWARD:
		Backward();
 80011e6:	f000 f88b 	bl	8001300 <Backward>
		break;
 80011ea:	e01d      	b.n	8001228 <Move+0x94>
	case RIGHT:
		Right();
 80011ec:	f000 f8b8 	bl	8001360 <Right>
		break;
 80011f0:	e01a      	b.n	8001228 <Move+0x94>
	case LEFT:
		Left();
 80011f2:	f000 f8e5 	bl	80013c0 <Left>
		break;
 80011f6:	e017      	b.n	8001228 <Move+0x94>
	case FR45:
		Fr45();
 80011f8:	f000 f912 	bl	8001420 <Fr45>
		break;
 80011fc:	e014      	b.n	8001228 <Move+0x94>
	case FL45:
		Fl45();
 80011fe:	f000 f933 	bl	8001468 <Fl45>
		break;
 8001202:	e011      	b.n	8001228 <Move+0x94>
	case BR45:
		Br45();
 8001204:	f000 f956 	bl	80014b4 <Br45>
		break;
 8001208:	e00e      	b.n	8001228 <Move+0x94>
	case BL45:
		Bl45();
 800120a:	f000 f979 	bl	8001500 <Bl45>
		break;
 800120e:	e00b      	b.n	8001228 <Move+0x94>
	case CW:
		Cw();
 8001210:	f000 f99a 	bl	8001548 <Cw>
		break;
 8001214:	e008      	b.n	8001228 <Move+0x94>
	case CCW:
		Ccw();
 8001216:	f000 f9c7 	bl	80015a8 <Ccw>
		break;
 800121a:	e005      	b.n	8001228 <Move+0x94>
	case STOP:
		Stop();
 800121c:	f000 f9f4 	bl	8001608 <Stop>
		break;
 8001220:	e002      	b.n	8001228 <Move+0x94>
	default:
		Stop();
 8001222:	f000 f9f1 	bl	8001608 <Stop>
		break;
 8001226:	bf00      	nop
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <Throttle>:

void Throttle()
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	if(duty2 > 500 && duty2 < 1000)
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <Throttle+0x64>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800123e:	dd10      	ble.n	8001262 <Throttle+0x32>
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <Throttle+0x64>)
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124a:	da0a      	bge.n	8001262 <Throttle+0x32>
	{
		throttle = (duty2-500)*2;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <Throttle+0x64>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001256:	b29b      	uxth	r3, r3
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <Throttle+0x68>)
 8001260:	801a      	strh	r2, [r3, #0]
	}

	TIM4->CCR1 = throttle;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <Throttle+0x68>)
 8001264:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <Throttle+0x6c>)
 800126a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = throttle;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <Throttle+0x68>)
 800126e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <Throttle+0x6c>)
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = throttle;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <Throttle+0x68>)
 8001278:	f9b3 2000 	ldrsh.w	r2, [r3]
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <Throttle+0x6c>)
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = throttle;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <Throttle+0x68>)
 8001282:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <Throttle+0x6c>)
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200001e0 	.word	0x200001e0
 8001298:	2000012a 	.word	0x2000012a
 800129c:	40000800 	.word	0x40000800

080012a0 <Forward>:
{
	preduty2 = duty2;
}

void Forward()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);  //FR_CW_CCW
 80012a4:	2200      	movs	r2, #0
 80012a6:	2102      	movs	r1, #2
 80012a8:	4812      	ldr	r0, [pc, #72]	; (80012f4 <Forward+0x54>)
 80012aa:	f001 f82b 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);  //FL_CW_CCW
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b4:	4810      	ldr	r0, [pc, #64]	; (80012f8 <Forward+0x58>)
 80012b6:	f001 f825 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);  //RR_CW_CCW
 80012ba:	2200      	movs	r2, #0
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <Forward+0x58>)
 80012c0:	f001 f820 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);  //RL_CW_CCW
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <Forward+0x58>)
 80012cc:	f001 f81a 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012d0:	2100      	movs	r1, #0
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <Forward+0x5c>)
 80012d4:	f002 f8ca 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80012d8:	2104      	movs	r1, #4
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <Forward+0x5c>)
 80012dc:	f002 f8c6 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012e0:	2108      	movs	r1, #8
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <Forward+0x5c>)
 80012e4:	f002 f8c2 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80012e8:	210c      	movs	r1, #12
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <Forward+0x5c>)
 80012ec:	f002 f8be 	bl	800346c <HAL_TIM_PWM_Start>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021800 	.word	0x40021800
 80012f8:	40021400 	.word	0x40021400
 80012fc:	2000009c 	.word	0x2000009c

08001300 <Backward>:

void Backward()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);  //FR_CW_CCW
 8001304:	2201      	movs	r2, #1
 8001306:	2102      	movs	r1, #2
 8001308:	4812      	ldr	r0, [pc, #72]	; (8001354 <Backward+0x54>)
 800130a:	f000 fffb 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);  //FL_CW_CCW
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <Backward+0x58>)
 8001316:	f000 fff5 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);  //RR_CW_CCW
 800131a:	2201      	movs	r2, #1
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <Backward+0x58>)
 8001320:	f000 fff0 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);  //RL_CW_CCW
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <Backward+0x58>)
 800132c:	f000 ffea 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001330:	2100      	movs	r1, #0
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <Backward+0x5c>)
 8001334:	f002 f89a 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001338:	2104      	movs	r1, #4
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <Backward+0x5c>)
 800133c:	f002 f896 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001340:	2108      	movs	r1, #8
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <Backward+0x5c>)
 8001344:	f002 f892 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001348:	210c      	movs	r1, #12
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <Backward+0x5c>)
 800134c:	f002 f88e 	bl	800346c <HAL_TIM_PWM_Start>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021800 	.word	0x40021800
 8001358:	40021400 	.word	0x40021400
 800135c:	2000009c 	.word	0x2000009c

08001360 <Right>:

void Right()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);  //FR_CW_CCW
 8001364:	2201      	movs	r2, #1
 8001366:	2102      	movs	r1, #2
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <Right+0x54>)
 800136a:	f000 ffcb 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);  //FL_CW_CCW
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <Right+0x58>)
 8001376:	f000 ffc5 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);  //RR_CW_CCW
 800137a:	2200      	movs	r2, #0
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <Right+0x58>)
 8001380:	f000 ffc0 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);  //RL_CW_CCW
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	480b      	ldr	r0, [pc, #44]	; (80013b8 <Right+0x58>)
 800138c:	f000 ffba 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001390:	2100      	movs	r1, #0
 8001392:	480a      	ldr	r0, [pc, #40]	; (80013bc <Right+0x5c>)
 8001394:	f002 f86a 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001398:	2104      	movs	r1, #4
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <Right+0x5c>)
 800139c:	f002 f866 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80013a0:	2108      	movs	r1, #8
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <Right+0x5c>)
 80013a4:	f002 f862 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013a8:	210c      	movs	r1, #12
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <Right+0x5c>)
 80013ac:	f002 f85e 	bl	800346c <HAL_TIM_PWM_Start>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021800 	.word	0x40021800
 80013b8:	40021400 	.word	0x40021400
 80013bc:	2000009c 	.word	0x2000009c

080013c0 <Left>:

void Left()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);  //FR_CW_CCW
 80013c4:	2200      	movs	r2, #0
 80013c6:	2102      	movs	r1, #2
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <Left+0x54>)
 80013ca:	f000 ff9b 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);  //FL_CW_CCW
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <Left+0x58>)
 80013d6:	f000 ff95 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);  //RR_CW_CCW
 80013da:	2201      	movs	r2, #1
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <Left+0x58>)
 80013e0:	f000 ff90 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);  //RL_CW_CCW
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <Left+0x58>)
 80013ec:	f000 ff8a 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80013f0:	2100      	movs	r1, #0
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <Left+0x5c>)
 80013f4:	f002 f83a 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80013f8:	2104      	movs	r1, #4
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <Left+0x5c>)
 80013fc:	f002 f836 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001400:	2108      	movs	r1, #8
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <Left+0x5c>)
 8001404:	f002 f832 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001408:	210c      	movs	r1, #12
 800140a:	4804      	ldr	r0, [pc, #16]	; (800141c <Left+0x5c>)
 800140c:	f002 f82e 	bl	800346c <HAL_TIM_PWM_Start>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021800 	.word	0x40021800
 8001418:	40021400 	.word	0x40021400
 800141c:	2000009c 	.word	0x2000009c

08001420 <Fr45>:

void Fr45()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);  //FL_CW_CCW
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <Fr45+0x40>)
 800142c:	f000 ff6a 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);  //RR_CW_CCW
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <Fr45+0x40>)
 8001436:	f000 ff65 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800143a:	2100      	movs	r1, #0
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <Fr45+0x44>)
 800143e:	f002 f8dd 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001442:	2104      	movs	r1, #4
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <Fr45+0x44>)
 8001446:	f002 f811 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800144a:	2108      	movs	r1, #8
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <Fr45+0x44>)
 800144e:	f002 f80d 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8001452:	210c      	movs	r1, #12
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <Fr45+0x44>)
 8001456:	f002 f8d1 	bl	80035fc <HAL_TIM_PWM_Stop>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021400 	.word	0x40021400
 8001464:	2000009c 	.word	0x2000009c

08001468 <Fl45>:

void Fl45()
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);  //FR_CW_CCW
 800146c:	2200      	movs	r2, #0
 800146e:	2102      	movs	r1, #2
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <Fl45+0x40>)
 8001472:	f000 ff47 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);  //RL_CW_CCW
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <Fl45+0x44>)
 800147e:	f000 ff41 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001482:	2100      	movs	r1, #0
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <Fl45+0x48>)
 8001486:	f001 fff1 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800148a:	2104      	movs	r1, #4
 800148c:	4808      	ldr	r0, [pc, #32]	; (80014b0 <Fl45+0x48>)
 800148e:	f002 f8b5 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001492:	2108      	movs	r1, #8
 8001494:	4806      	ldr	r0, [pc, #24]	; (80014b0 <Fl45+0x48>)
 8001496:	f002 f8b1 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800149a:	210c      	movs	r1, #12
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <Fl45+0x48>)
 800149e:	f001 ffe5 	bl	800346c <HAL_TIM_PWM_Start>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021400 	.word	0x40021400
 80014b0:	2000009c 	.word	0x2000009c

080014b4 <Br45>:


void Br45()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);  //FR_CW_CCW
 80014b8:	2201      	movs	r2, #1
 80014ba:	2102      	movs	r1, #2
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <Br45+0x40>)
 80014be:	f000 ff21 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);  //RL_CW_CCW
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <Br45+0x44>)
 80014ca:	f000 ff1b 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014ce:	2100      	movs	r1, #0
 80014d0:	480a      	ldr	r0, [pc, #40]	; (80014fc <Br45+0x48>)
 80014d2:	f001 ffcb 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80014d6:	2104      	movs	r1, #4
 80014d8:	4808      	ldr	r0, [pc, #32]	; (80014fc <Br45+0x48>)
 80014da:	f002 f88f 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80014de:	2108      	movs	r1, #8
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <Br45+0x48>)
 80014e2:	f002 f88b 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80014e6:	210c      	movs	r1, #12
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <Br45+0x48>)
 80014ea:	f001 ffbf 	bl	800346c <HAL_TIM_PWM_Start>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021800 	.word	0x40021800
 80014f8:	40021400 	.word	0x40021400
 80014fc:	2000009c 	.word	0x2000009c

08001500 <Bl45>:

void Bl45()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);  //FL_CW_CCW
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <Bl45+0x40>)
 800150c:	f000 fefa 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);  //RR_CW_CCW
 8001510:	2201      	movs	r2, #1
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <Bl45+0x40>)
 8001516:	f000 fef5 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800151a:	2100      	movs	r1, #0
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <Bl45+0x44>)
 800151e:	f002 f86d 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001522:	2104      	movs	r1, #4
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <Bl45+0x44>)
 8001526:	f001 ffa1 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800152a:	2108      	movs	r1, #8
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <Bl45+0x44>)
 800152e:	f001 ff9d 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8001532:	210c      	movs	r1, #12
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <Bl45+0x44>)
 8001536:	f002 f861 	bl	80035fc <HAL_TIM_PWM_Stop>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021400 	.word	0x40021400
 8001544:	2000009c 	.word	0x2000009c

08001548 <Cw>:

void Cw()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);  //FR_CW_CCW
 800154c:	2200      	movs	r2, #0
 800154e:	2102      	movs	r1, #2
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <Cw+0x54>)
 8001552:	f000 fed7 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_RESET);  //FL_CW_CCW
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <Cw+0x58>)
 800155e:	f000 fed1 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_RESET);  //RR_CW_CCW
 8001562:	2200      	movs	r2, #0
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <Cw+0x58>)
 8001568:	f000 fecc 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_RESET);  //RL_CW_CCW
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <Cw+0x58>)
 8001574:	f000 fec6 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001578:	2100      	movs	r1, #0
 800157a:	480a      	ldr	r0, [pc, #40]	; (80015a4 <Cw+0x5c>)
 800157c:	f001 ff76 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001580:	2104      	movs	r1, #4
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <Cw+0x5c>)
 8001584:	f001 ff72 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001588:	2108      	movs	r1, #8
 800158a:	4806      	ldr	r0, [pc, #24]	; (80015a4 <Cw+0x5c>)
 800158c:	f001 ff6e 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001590:	210c      	movs	r1, #12
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <Cw+0x5c>)
 8001594:	f001 ff6a 	bl	800346c <HAL_TIM_PWM_Start>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021800 	.word	0x40021800
 80015a0:	40021400 	.word	0x40021400
 80015a4:	2000009c 	.word	0x2000009c

080015a8 <Ccw>:

void Ccw()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_SET);  //FR_CW_CCW
 80015ac:	2201      	movs	r2, #1
 80015ae:	2102      	movs	r1, #2
 80015b0:	4812      	ldr	r0, [pc, #72]	; (80015fc <Ccw+0x54>)
 80015b2:	f000 fea7 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9,GPIO_PIN_SET);  //FL_CW_CCW
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <Ccw+0x58>)
 80015be:	f000 fea1 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7,GPIO_PIN_SET);  //RR_CW_CCW
 80015c2:	2201      	movs	r2, #1
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <Ccw+0x58>)
 80015c8:	f000 fe9c 	bl	8002304 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8,GPIO_PIN_SET);  //RL_CW_CCW
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d2:	480b      	ldr	r0, [pc, #44]	; (8001600 <Ccw+0x58>)
 80015d4:	f000 fe96 	bl	8002304 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015d8:	2100      	movs	r1, #0
 80015da:	480a      	ldr	r0, [pc, #40]	; (8001604 <Ccw+0x5c>)
 80015dc:	f001 ff46 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015e0:	2104      	movs	r1, #4
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <Ccw+0x5c>)
 80015e4:	f001 ff42 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015e8:	2108      	movs	r1, #8
 80015ea:	4806      	ldr	r0, [pc, #24]	; (8001604 <Ccw+0x5c>)
 80015ec:	f001 ff3e 	bl	800346c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015f0:	210c      	movs	r1, #12
 80015f2:	4804      	ldr	r0, [pc, #16]	; (8001604 <Ccw+0x5c>)
 80015f4:	f001 ff3a 	bl	800346c <HAL_TIM_PWM_Start>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021800 	.word	0x40021800
 8001600:	40021400 	.word	0x40021400
 8001604:	2000009c 	.word	0x2000009c

08001608 <Stop>:

void Stop()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800160c:	2100      	movs	r1, #0
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <Stop+0x28>)
 8001610:	f001 fff4 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001614:	2104      	movs	r1, #4
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <Stop+0x28>)
 8001618:	f001 fff0 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800161c:	2108      	movs	r1, #8
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <Stop+0x28>)
 8001620:	f001 ffec 	bl	80035fc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8001624:	210c      	movs	r1, #12
 8001626:	4802      	ldr	r0, [pc, #8]	; (8001630 <Stop+0x28>)
 8001628:	f001 ffe8 	bl	80035fc <HAL_TIM_PWM_Stop>
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000009c 	.word	0x2000009c

08001634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <HAL_MspInit+0x4c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	; 0x38
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2230      	movs	r2, #48	; 0x30
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fcf9 	bl	800508c <memset>
  if(hrtc->Instance==RTC)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <HAL_RTC_MspInit+0x4c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d111      	bne.n	80016c8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016a4:	2320      	movs	r3, #32
 80016a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fb1e 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80016be:	f7ff fd63 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_RTC_MspInit+0x50>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3738      	adds	r7, #56	; 0x38
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40002800 	.word	0x40002800
 80016d4:	42470e3c 	.word	0x42470e3c

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b090      	sub	sp, #64	; 0x40
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f8:	d14b      	bne.n	8001792 <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a62      	ldr	r2, [pc, #392]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
 800171a:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a5b      	ldr	r2, [pc, #364]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	4b55      	ldr	r3, [pc, #340]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a54      	ldr	r2, [pc, #336]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b52      	ldr	r3, [pc, #328]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174e:	2301      	movs	r3, #1
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175e:	2301      	movs	r3, #1
 8001760:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	4849      	ldr	r0, [pc, #292]	; (8001890 <HAL_TIM_Base_MspInit+0x1b8>)
 800176a:	f000 fc1f 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001780:	2301      	movs	r3, #1
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001788:	4619      	mov	r1, r3
 800178a:	4842      	ldr	r0, [pc, #264]	; (8001894 <HAL_TIM_Base_MspInit+0x1bc>)
 800178c:	f000 fc0e 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001790:	e077      	b.n	8001882 <HAL_TIM_Base_MspInit+0x1aa>
  else if(htim_base->Instance==TIM3)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HAL_TIM_Base_MspInit+0x1c0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d14b      	bne.n	8001834 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a39      	ldr	r2, [pc, #228]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a2b      	ldr	r2, [pc, #172]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017f0:	2340      	movs	r3, #64	; 0x40
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001800:	2302      	movs	r3, #2
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4821      	ldr	r0, [pc, #132]	; (8001890 <HAL_TIM_Base_MspInit+0x1b8>)
 800180c:	f000 fbce 	bl	8001fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001822:	2302      	movs	r3, #2
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	481b      	ldr	r0, [pc, #108]	; (800189c <HAL_TIM_Base_MspInit+0x1c4>)
 800182e:	f000 fbbd 	bl	8001fac <HAL_GPIO_Init>
}
 8001832:	e026      	b.n	8001882 <HAL_TIM_Base_MspInit+0x1aa>
  else if(htim_base->Instance==TIM4)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_TIM_Base_MspInit+0x1c8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10e      	bne.n	800185c <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
}
 800185a:	e012      	b.n	8001882 <HAL_TIM_Base_MspInit+0x1aa>
  else if(htim_base->Instance==TIM6)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <HAL_TIM_Base_MspInit+0x1cc>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d10d      	bne.n	8001882 <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001870:	f043 0310 	orr.w	r3, r3, #16
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_TIM_Base_MspInit+0x1b4>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
}
 8001882:	bf00      	nop
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020400 	.word	0x40020400
 8001898:	40000400 	.word	0x40000400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40000800 	.word	0x40000800
 80018a4:	40001000 	.word	0x40001000

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_TIM_MspPostInit+0x68>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d11e      	bne.n	8001908 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_TIM_MspPostInit+0x6c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_TIM_MspPostInit+0x6c>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_TIM_MspPostInit+0x6c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <HAL_TIM_MspPostInit+0x70>)
 8001904:	f000 fb52 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40000800 	.word	0x40000800
 8001914:	40023800 	.word	0x40023800
 8001918:	40020c00 	.word	0x40020c00

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <HAL_UART_MspInit+0x124>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d14a      	bne.n	80019d4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a3f      	ldr	r2, [pc, #252]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a38      	ldr	r2, [pc, #224]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_UART_MspInit+0x128>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_UART_MspInit+0x128>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001992:	2308      	movs	r3, #8
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a2:	2307      	movs	r3, #7
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4826      	ldr	r0, [pc, #152]	; (8001a48 <HAL_UART_MspInit+0x12c>)
 80019ae:	f000 fafd 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019b2:	2320      	movs	r3, #32
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019c2:	2307      	movs	r3, #7
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	481f      	ldr	r0, [pc, #124]	; (8001a4c <HAL_UART_MspInit+0x130>)
 80019ce:	f000 faed 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019d2:	e031      	b.n	8001a38 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_UART_MspInit+0x134>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12c      	bne.n	8001a38 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_UART_MspInit+0x128>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_UART_MspInit+0x128>)
 80019e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_UART_MspInit+0x128>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UART_MspInit+0x128>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <HAL_UART_MspInit+0x130>)
 8001a34:	f000 faba 	bl	8001fac <HAL_GPIO_Init>
}
 8001a38:	bf00      	nop
 8001a3a:	3730      	adds	r7, #48	; 0x30
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40004400 	.word	0x40004400
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020c00 	.word	0x40020c00
 8001a50:	40004800 	.word	0x40004800

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa0:	f000 f952 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM2_IRQHandler+0x10>)
 8001aae:	f001 ff97 	bl	80039e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001e4 	.word	0x200001e4

08001abc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <TIM3_IRQHandler+0x10>)
 8001ac2:	f001 ff8d 	bl	80039e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000012c 	.word	0x2000012c

08001ad0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM6_DAC_IRQHandler+0x10>)
 8001ad6:	f001 ff83 	bl	80039e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000198 	.word	0x20000198

08001ae4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e00a      	b.n	8001b0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	4601      	mov	r1, r0
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	60ba      	str	r2, [r7, #8]
 8001b02:	b2ca      	uxtb	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf0      	blt.n	8001af6 <_read+0x12>
	}

return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e009      	b.n	8001b44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fb13 	bl	8001164 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3301      	adds	r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbf1      	blt.n	8001b30 <_write+0x12>
	}
	return len;
 8001b4c:	687b      	ldr	r3, [r7, #4]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_close>:

int _close(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_isatty>:

int _isatty(int file)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f003 fa22 	bl	8005038 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20030000 	.word	0x20030000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	2000008c 	.word	0x2000008c
 8001c28:	20000288 	.word	0x20000288

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c56:	490e      	ldr	r1, [pc, #56]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c58:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c6c:	4c0b      	ldr	r4, [pc, #44]	; (8001c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffd7 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f003 f9e1 	bl	8005044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7fe fdad 	bl	80007e0 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c94:	08006028 	.word	0x08006028
  ldr r2, =_sbss
 8001c98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c9c:	20000284 	.word	0x20000284

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <HAL_Init+0x40>)
 8001cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_Init+0x40>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_Init+0x40>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f92b 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fcac 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f943 	bl	8001f92 <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f90b 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	; (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000270 	.word	0x20000270

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000270 	.word	0x20000270

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e177      	b.n	80022b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f040 8166 	bne.w	80022b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d005      	beq.n	8001ffe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d130      	bne.n	8002060 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 0201 	and.w	r2, r3, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b03      	cmp	r3, #3
 800206a:	d017      	beq.n	800209c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d123      	bne.n	80020f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	08da      	lsrs	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3208      	adds	r2, #8
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0203 	and.w	r2, r3, #3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80c0 	beq.w	80022b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_GPIO_Init+0x324>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	4a61      	ldr	r2, [pc, #388]	; (80022d4 <HAL_GPIO_Init+0x328>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_GPIO_Init+0x32c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d037      	beq.n	80021ea <HAL_GPIO_Init+0x23e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a57      	ldr	r2, [pc, #348]	; (80022dc <HAL_GPIO_Init+0x330>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_GPIO_Init+0x23a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <HAL_GPIO_Init+0x236>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_GPIO_Init+0x338>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x232>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_GPIO_Init+0x33c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x22e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a53      	ldr	r2, [pc, #332]	; (80022ec <HAL_GPIO_Init+0x340>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x22a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_GPIO_Init+0x344>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_GPIO_Init+0x348>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x34c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x21e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_GPIO_Init+0x350>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x21a>
 80021c2:	2309      	movs	r3, #9
 80021c4:	e012      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021c6:	230a      	movs	r3, #10
 80021c8:	e010      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021ca:	2308      	movs	r3, #8
 80021cc:	e00e      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00c      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021d2:	2306      	movs	r3, #6
 80021d4:	e00a      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021d6:	2305      	movs	r3, #5
 80021d8:	e008      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021da:	2304      	movs	r3, #4
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021de:	2303      	movs	r3, #3
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021ea:	2300      	movs	r3, #0
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f002 0203 	and.w	r2, r2, #3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_GPIO_Init+0x328>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_GPIO_Init+0x354>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800222e:	4a34      	ldr	r2, [pc, #208]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002258:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_GPIO_Init+0x354>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_GPIO_Init+0x354>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_GPIO_Init+0x354>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	f67f ae84 	bls.w	8001fc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40021800 	.word	0x40021800
 80022f4:	40021c00 	.word	0x40021c00
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40022400 	.word	0x40022400
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002348:	887a      	ldrh	r2, [r7, #2]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	041a      	lsls	r2, r3, #16
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43d9      	mvns	r1, r3
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	400b      	ands	r3, r1
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_PWREx_EnableOverDrive+0x90>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_PWREx_EnableOverDrive+0x94>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002398:	f7ff fcea 	bl	8001d70 <HAL_GetTick>
 800239c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800239e:	e009      	b.n	80023b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023a0:	f7ff fce6 	bl	8001d70 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ae:	d901      	bls.n	80023b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e01f      	b.n	80023f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_PWREx_EnableOverDrive+0x98>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d1ee      	bne.n	80023a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff fcd2 	bl	8001d70 <HAL_GetTick>
 80023cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023ce:	e009      	b.n	80023e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023d0:	f7ff fcce 	bl	8001d70 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023de:	d901      	bls.n	80023e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e007      	b.n	80023f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <HAL_PWREx_EnableOverDrive+0x98>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023f0:	d1ee      	bne.n	80023d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	420e0040 	.word	0x420e0040
 8002404:	40007000 	.word	0x40007000
 8002408:	420e0044 	.word	0x420e0044

0800240c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e264      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d075      	beq.n	8002516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242a:	4ba3      	ldr	r3, [pc, #652]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d00c      	beq.n	8002450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4ba0      	ldr	r3, [pc, #640]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800243e:	2b08      	cmp	r3, #8
 8002440:	d112      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b9d      	ldr	r3, [pc, #628]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4b99      	ldr	r3, [pc, #612]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05b      	beq.n	8002514 <HAL_RCC_OscConfig+0x108>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d157      	bne.n	8002514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e23f      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002470:	d106      	bne.n	8002480 <HAL_RCC_OscConfig+0x74>
 8002472:	4b91      	ldr	r3, [pc, #580]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a90      	ldr	r2, [pc, #576]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0xb0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x98>
 800248a:	4b8b      	ldr	r3, [pc, #556]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a8a      	ldr	r2, [pc, #552]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a87      	ldr	r2, [pc, #540]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xb0>
 80024a4:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a83      	ldr	r2, [pc, #524]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff fc54 	bl	8001d70 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff fc50 	bl	8001d70 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e204      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b76      	ldr	r3, [pc, #472]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xc0>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fc40 	bl	8001d70 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff fc3c 	bl	8001d70 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1f0      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	4b6c      	ldr	r3, [pc, #432]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0xe8>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002522:	4b65      	ldr	r3, [pc, #404]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b62      	ldr	r3, [pc, #392]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d11c      	bne.n	8002574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d116      	bne.n	8002574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x152>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e1c4      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b56      	ldr	r3, [pc, #344]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4952      	ldr	r1, [pc, #328]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	e03a      	b.n	80025ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <HAL_RCC_OscConfig+0x2b0>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff fbf5 	bl	8001d70 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7ff fbf1 	bl	8001d70 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1a5      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4940      	ldr	r1, [pc, #256]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b3f      	ldr	r3, [pc, #252]	; (80026bc <HAL_RCC_OscConfig+0x2b0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7ff fbd4 	bl	8001d70 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025cc:	f7ff fbd0 	bl	8001d70 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e184      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d030      	beq.n	8002658 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <HAL_RCC_OscConfig+0x2b4>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7ff fbb4 	bl	8001d70 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800260c:	f7ff fbb0 	bl	8001d70 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e164      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x200>
 800262a:	e015      	b.n	8002658 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCC_OscConfig+0x2b4>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff fb9d 	bl	8001d70 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff fb99 	bl	8001d70 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e14d      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a0 	beq.w	80027a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_OscConfig+0x2b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_RCC_OscConfig+0x2b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_RCC_OscConfig+0x2b8>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7ff fb5f 	bl	8001d70 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e011      	b.n	80026da <HAL_RCC_OscConfig+0x2ce>
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	42470000 	.word	0x42470000
 80026c0:	42470e80 	.word	0x42470e80
 80026c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7ff fb52 	bl	8001d70 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e106      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCC_OscConfig+0x4e4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d106      	bne.n	80026fc <HAL_RCC_OscConfig+0x2f0>
 80026ee:	4b81      	ldr	r3, [pc, #516]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a80      	ldr	r2, [pc, #512]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e01c      	b.n	8002736 <HAL_RCC_OscConfig+0x32a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b05      	cmp	r3, #5
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0x312>
 8002704:	4b7b      	ldr	r3, [pc, #492]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a7a      	ldr	r2, [pc, #488]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	4b78      	ldr	r3, [pc, #480]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	4a77      	ldr	r2, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	; 0x70
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0x32a>
 800271e:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a74      	ldr	r2, [pc, #464]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	4b72      	ldr	r3, [pc, #456]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a71      	ldr	r2, [pc, #452]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d015      	beq.n	800276a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff fb17 	bl	8001d70 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7ff fb13 	bl	8001d70 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e0c5      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	4b65      	ldr	r3, [pc, #404]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0ee      	beq.n	8002746 <HAL_RCC_OscConfig+0x33a>
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fb01 	bl	8001d70 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7ff fafd 	bl	8001d70 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0af      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	4b5a      	ldr	r3, [pc, #360]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002794:	7dfb      	ldrb	r3, [r7, #23]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 809b 	beq.w	80028e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d05c      	beq.n	8002876 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d141      	bne.n	8002848 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b4c      	ldr	r3, [pc, #304]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ca:	f7ff fad1 	bl	8001d70 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7ff facd 	bl	8001d70 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e081      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	019b      	lsls	r3, r3, #6
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	3b01      	subs	r3, #1
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	431a      	orrs	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	4937      	ldr	r1, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281a:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff faa6 	bl	8001d70 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7ff faa2 	bl	8001d70 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e056      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x41c>
 8002846:	e04e      	b.n	80028e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_RCC_OscConfig+0x4ec>)
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff fa8f 	bl	8001d70 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff fa8b 	bl	8001d70 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e03f      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x44a>
 8002874:	e037      	b.n	80028e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e032      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_RCC_OscConfig+0x4e8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d028      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d121      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d11a      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b2:	4013      	ands	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40007000 	.word	0x40007000
 80028f4:	40023800 	.word	0x40023800
 80028f8:	42470060 	.word	0x42470060

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0cc      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002910:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d90c      	bls.n	8002938 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0b8      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002950:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800295a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a52      	ldr	r2, [pc, #328]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002972:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	494d      	ldr	r1, [pc, #308]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d044      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d119      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e07f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e06f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e067      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4934      	ldr	r1, [pc, #208]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ec:	f7ff f9c0 	bl	8001d70 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7ff f9bc 	bl	8001d70 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e04f      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d20c      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e032      	b.n	8002aaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	490e      	ldr	r1, [pc, #56]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a82:	f000 f821 	bl	8002ac8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4602      	mov	r2, r0
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	490a      	ldr	r1, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	5ccb      	ldrb	r3, [r1, r3]
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f920 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023c00 	.word	0x40023c00
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08005f68 	.word	0x08005f68
 8002ac0:	20000000 	.word	0x20000000
 8002ac4:	20000004 	.word	0x20000004

08002ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae0:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d00d      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x40>
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	f200 80bd 	bhi.w	8002c6c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x34>
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afa:	e0b7      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002afe:	60bb      	str	r3, [r7, #8]
       break;
 8002b00:	e0b7      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b02:	4b61      	ldr	r3, [pc, #388]	; (8002c88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b04:	60bb      	str	r3, [r7, #8]
      break;
 8002b06:	e0b4      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b08:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b12:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d04d      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1e:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	099b      	lsrs	r3, r3, #6
 8002b24:	461a      	mov	r2, r3
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	ea02 0800 	and.w	r8, r2, r0
 8002b36:	ea03 0901 	and.w	r9, r3, r1
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	014b      	lsls	r3, r1, #5
 8002b48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b4c:	0142      	lsls	r2, r0, #5
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	ebb0 0008 	subs.w	r0, r0, r8
 8002b56:	eb61 0109 	sbc.w	r1, r1, r9
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b68:	0182      	lsls	r2, r0, #6
 8002b6a:	1a12      	subs	r2, r2, r0
 8002b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b70:	f04f 0000 	mov.w	r0, #0
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	00d9      	lsls	r1, r3, #3
 8002b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b7e:	00d0      	lsls	r0, r2, #3
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	eb12 0208 	adds.w	r2, r2, r8
 8002b88:	eb43 0309 	adc.w	r3, r3, r9
 8002b8c:	f04f 0000 	mov.w	r0, #0
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	0259      	lsls	r1, r3, #9
 8002b96:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b9a:	0250      	lsls	r0, r2, #9
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	f7fd fb70 	bl	8000290 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e04a      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	ea02 0400 	and.w	r4, r2, r0
 8002bd2:	ea03 0501 	and.w	r5, r3, r1
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	4629      	mov	r1, r5
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	014b      	lsls	r3, r1, #5
 8002be4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002be8:	0142      	lsls	r2, r0, #5
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	1b00      	subs	r0, r0, r4
 8002bf0:	eb61 0105 	sbc.w	r1, r1, r5
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	018b      	lsls	r3, r1, #6
 8002bfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c02:	0182      	lsls	r2, r0, #6
 8002c04:	1a12      	subs	r2, r2, r0
 8002c06:	eb63 0301 	sbc.w	r3, r3, r1
 8002c0a:	f04f 0000 	mov.w	r0, #0
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	00d9      	lsls	r1, r3, #3
 8002c14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c18:	00d0      	lsls	r0, r2, #3
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	1912      	adds	r2, r2, r4
 8002c20:	eb45 0303 	adc.w	r3, r5, r3
 8002c24:	f04f 0000 	mov.w	r0, #0
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	0299      	lsls	r1, r3, #10
 8002c2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c32:	0290      	lsls	r0, r2, #10
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	f7fd fb24 	bl	8000290 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	60bb      	str	r3, [r7, #8]
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c6e:	60bb      	str	r3, [r7, #8]
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	68bb      	ldr	r3, [r7, #8]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	00f42400 	.word	0x00f42400
 8002c88:	007a1200 	.word	0x007a1200

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cac:	4602      	mov	r2, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4903      	ldr	r1, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cba:	5ccb      	ldrb	r3, [r1, r3]
 8002cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08005f78 	.word	0x08005f78

08002ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cd0:	f7ff ffdc 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0b5b      	lsrs	r3, r3, #13
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08005f78 	.word	0x08005f78

08002cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d075      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d28:	4bad      	ldr	r3, [pc, #692]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2e:	f7ff f81f 	bl	8001d70 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d36:	f7ff f81b 	bl	8001d70 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e18b      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d48:	4ba6      	ldr	r3, [pc, #664]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f0      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	019a      	lsls	r2, r3, #6
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	071b      	lsls	r3, r3, #28
 8002d6c:	499d      	ldr	r1, [pc, #628]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01f      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d80:	4b98      	ldr	r3, [pc, #608]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d86:	0f1b      	lsrs	r3, r3, #28
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	019a      	lsls	r2, r3, #6
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	071b      	lsls	r3, r3, #28
 8002da0:	4990      	ldr	r1, [pc, #576]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002da8:	4b8e      	ldr	r3, [pc, #568]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dae:	f023 021f 	bic.w	r2, r3, #31
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	498a      	ldr	r1, [pc, #552]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	019a      	lsls	r2, r3, #6
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	071b      	lsls	r3, r3, #28
 8002de0:	4980      	ldr	r1, [pc, #512]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002de8:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dee:	f7fe ffbf 	bl	8001d70 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002df6:	f7fe ffbb 	bl	8001d70 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e12b      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e08:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d079      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e2c:	4b6e      	ldr	r3, [pc, #440]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e32:	f7fe ff9d 	bl	8001d70 <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e3a:	f7fe ff99 	bl	8001d70 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e109      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e4c:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d0ef      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d020      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e66:	4b5f      	ldr	r3, [pc, #380]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	0f1b      	lsrs	r3, r3, #28
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	019a      	lsls	r2, r3, #6
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	431a      	orrs	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	071b      	lsls	r3, r3, #28
 8002e86:	4957      	ldr	r1, [pc, #348]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e8e:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	4950      	ldr	r1, [pc, #320]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01e      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	0e1b      	lsrs	r3, r3, #24
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	019a      	lsls	r2, r3, #6
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	071b      	lsls	r3, r3, #28
 8002ed4:	4943      	ldr	r1, [pc, #268]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	493e      	ldr	r1, [pc, #248]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ef8:	f7fe ff3a 	bl	8001d70 <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f00:	f7fe ff36 	bl	8001d70 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0a6      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1e:	d1ef      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 808d 	beq.w	8003048 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a27      	ldr	r2, [pc, #156]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f56:	f7fe ff0b 	bl	8001d70 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe ff07 	bl	8001d70 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e077      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d039      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d032      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fb0:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d11e      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fed5 	bl	8001d70 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	e014      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fed1 	bl	8001d70 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d90b      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e03f      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002fe0:	42470068 	.word	0x42470068
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470070 	.word	0x42470070
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0e4      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d10d      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800301e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003022:	4911      	ldr	r1, [pc, #68]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
 8003028:	e005      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003030:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003034:	6093      	str	r3, [r2, #8]
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	4909      	ldr	r1, [pc, #36]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003044:	4313      	orrs	r3, r2
 8003046:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800305c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	424711e0 	.word	0x424711e0

08003070 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e083      	b.n	800318a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7f5b      	ldrb	r3, [r3, #29]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d105      	bne.n	8003098 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe faf6 	bl	8001684 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	22ca      	movs	r2, #202	; 0xca
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2253      	movs	r2, #83	; 0x53
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f897 	bl	80031e2 <RTC_EnterInitMode>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2204      	movs	r2, #4
 80030c6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e05e      	b.n	800318a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030de:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68d2      	ldr	r2, [r2, #12]
 8003106:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6919      	ldr	r1, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	041a      	lsls	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800312a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10e      	bne.n	8003158 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f829 	bl	8003192 <HAL_RTC_WaitForSynchro>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2204      	movs	r2, #4
 8003152:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e018      	b.n	800318a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	22ff      	movs	r2, #255	; 0xff
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ae:	f7fe fddf 	bl	8001d70 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031b4:	e009      	b.n	80031ca <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031b6:	f7fe fddb 	bl	8001d70 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031c4:	d901      	bls.n	80031ca <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e007      	b.n	80031da <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ee      	beq.n	80031b6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d119      	bne.n	8003230 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003206:	f7fe fdb3 	bl	8001d70 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800320c:	e009      	b.n	8003222 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800320e:	f7fe fdaf 	bl	8001d70 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800321c:	d901      	bls.n	8003222 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e007      	b.n	8003232 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ee      	beq.n	800320e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e041      	b.n	80032d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7fe fa39 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 fefd 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d001      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04e      	b.n	800338e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <HAL_TIM_Base_Start_IT+0xc4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d022      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331a:	d01d      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d018      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00e      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1b      	ldr	r2, [pc, #108]	; (80033ac <HAL_TIM_Base_Start_IT+0xd4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x80>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d111      	bne.n	800337c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b06      	cmp	r3, #6
 8003368:	d010      	beq.n	800338c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	e007      	b.n	800338c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40000c00 	.word	0x40000c00
 80033ac:	40010400 	.word	0x40010400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40001800 	.word	0x40001800

080033b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e041      	b.n	800344e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f839 	bl	8003456 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fe3e 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_TIM_PWM_Start+0x24>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e022      	b.n	80034d6 <HAL_TIM_PWM_Start+0x6a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d109      	bne.n	80034aa <HAL_TIM_PWM_Start+0x3e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e015      	b.n	80034d6 <HAL_TIM_PWM_Start+0x6a>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start+0x58>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_PWM_Start+0x6a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07c      	b.n	80035d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_PWM_Start+0x82>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ec:	e013      	b.n	8003516 <HAL_TIM_PWM_Start+0xaa>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Start+0x92>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034fc:	e00b      	b.n	8003516 <HAL_TIM_PWM_Start+0xaa>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start+0xa2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	e003      	b.n	8003516 <HAL_TIM_PWM_Start+0xaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f001 f9be 	bl	80048a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2d      	ldr	r2, [pc, #180]	; (80035e0 <HAL_TIM_PWM_Start+0x174>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_PWM_Start+0xcc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <HAL_TIM_PWM_Start+0x178>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_TIM_PWM_Start+0xd0>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_TIM_PWM_Start+0xd2>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_TIM_PWM_Start+0x174>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003564:	d01d      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <HAL_TIM_PWM_Start+0x17c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <HAL_TIM_PWM_Start+0x180>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_TIM_PWM_Start+0x184>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_TIM_PWM_Start+0x178>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_TIM_PWM_Start+0x188>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_PWM_Start+0x136>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_TIM_PWM_Start+0x18c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d111      	bne.n	80035c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b06      	cmp	r3, #6
 80035b2:	d010      	beq.n	80035d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	e007      	b.n	80035d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40001800 	.word	0x40001800

080035fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f001 f946 	bl	80048a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <HAL_TIM_PWM_Stop+0xd8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_TIM_PWM_Stop+0x2c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <HAL_TIM_PWM_Stop+0xdc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_TIM_PWM_Stop+0x30>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_TIM_PWM_Stop+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d017      	beq.n	8003662 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	f241 1311 	movw	r3, #4369	; 0x1111
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_TIM_PWM_Stop+0x66>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	f240 4344 	movw	r3, #1092	; 0x444
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_TIM_PWM_Stop+0x66>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	f241 1311 	movw	r3, #4369	; 0x1111
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10f      	bne.n	8003692 <HAL_TIM_PWM_Stop+0x96>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	f240 4344 	movw	r3, #1092	; 0x444
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d107      	bne.n	8003692 <HAL_TIM_PWM_Stop+0x96>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d104      	bne.n	80036a2 <HAL_TIM_PWM_Stop+0xa6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a0:	e013      	b.n	80036ca <HAL_TIM_PWM_Stop+0xce>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d104      	bne.n	80036b2 <HAL_TIM_PWM_Stop+0xb6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	e00b      	b.n	80036ca <HAL_TIM_PWM_Stop+0xce>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_PWM_Stop+0xc6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c0:	e003      	b.n	80036ca <HAL_TIM_PWM_Stop+0xce>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40010400 	.word	0x40010400

080036dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e041      	b.n	8003772 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f839 	bl	800377a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fcac 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <HAL_TIM_IC_Start_IT+0x1e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e013      	b.n	80037d6 <HAL_TIM_IC_Start_IT+0x46>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d104      	bne.n	80037be <HAL_TIM_IC_Start_IT+0x2e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	e00b      	b.n	80037d6 <HAL_TIM_IC_Start_IT+0x46>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_IC_Start_IT+0x3e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	e003      	b.n	80037d6 <HAL_TIM_IC_Start_IT+0x46>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <HAL_TIM_IC_Start_IT+0x58>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e013      	b.n	8003810 <HAL_TIM_IC_Start_IT+0x80>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d104      	bne.n	80037f8 <HAL_TIM_IC_Start_IT+0x68>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e00b      	b.n	8003810 <HAL_TIM_IC_Start_IT+0x80>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d104      	bne.n	8003808 <HAL_TIM_IC_Start_IT+0x78>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e003      	b.n	8003810 <HAL_TIM_IC_Start_IT+0x80>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800380e:	b2db      	uxtb	r3, r3
 8003810:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003812:	7bbb      	ldrb	r3, [r7, #14]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003818:	7b7b      	ldrb	r3, [r7, #13]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d001      	beq.n	8003822 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0cc      	b.n	80039bc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <HAL_TIM_IC_Start_IT+0xa2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	e013      	b.n	800385a <HAL_TIM_IC_Start_IT+0xca>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0xb2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003840:	e00b      	b.n	800385a <HAL_TIM_IC_Start_IT+0xca>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Start_IT+0xc2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003850:	e003      	b.n	800385a <HAL_TIM_IC_Start_IT+0xca>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_TIM_IC_Start_IT+0xda>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003868:	e013      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x102>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d104      	bne.n	800387a <HAL_TIM_IC_Start_IT+0xea>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003878:	e00b      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x102>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d104      	bne.n	800388a <HAL_TIM_IC_Start_IT+0xfa>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003888:	e003      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x102>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d841      	bhi.n	800391c <HAL_TIM_IC_Start_IT+0x18c>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <HAL_TIM_IC_Start_IT+0x110>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	0800391d 	.word	0x0800391d
 80038a8:	0800391d 	.word	0x0800391d
 80038ac:	0800391d 	.word	0x0800391d
 80038b0:	080038e7 	.word	0x080038e7
 80038b4:	0800391d 	.word	0x0800391d
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	0800391d 	.word	0x0800391d
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	0800391d 	.word	0x0800391d
 80038d0:	0800390b 	.word	0x0800390b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0202 	orr.w	r2, r2, #2
 80038e2:	60da      	str	r2, [r3, #12]
      break;
 80038e4:	e01d      	b.n	8003922 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0204 	orr.w	r2, r2, #4
 80038f4:	60da      	str	r2, [r3, #12]
      break;
 80038f6:	e014      	b.n	8003922 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	60da      	str	r2, [r3, #12]
      break;
 8003908:	e00b      	b.n	8003922 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0210 	orr.w	r2, r2, #16
 8003918:	60da      	str	r2, [r3, #12]
      break;
 800391a:	e002      	b.n	8003922 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	bf00      	nop
  }

  if (status == HAL_OK)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d148      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2201      	movs	r2, #1
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 ffb5 	bl	80048a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_TIM_IC_Start_IT+0x234>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d022      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d01d      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_TIM_IC_Start_IT+0x238>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d018      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <HAL_TIM_IC_Start_IT+0x23c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_TIM_IC_Start_IT+0x240>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_TIM_IC_Start_IT+0x244>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_TIM_IC_Start_IT+0x248>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIM_IC_Start_IT+0x1f6>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_TIM_IC_Start_IT+0x24c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d111      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b06      	cmp	r3, #6
 8003996:	d010      	beq.n	80039ba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a8:	e007      	b.n	80039ba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40010000 	.word	0x40010000
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40010400 	.word	0x40010400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40001800 	.word	0x40001800

080039e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0202 	mvn.w	r2, #2
 8003a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fc fe6e 	bl	8000704 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fb05 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb0c 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0204 	mvn.w	r2, #4
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fc fe44 	bl	8000704 <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fadb 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fae2 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0208 	mvn.w	r2, #8
 8003ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fc fe1a 	bl	8000704 <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fab1 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fab8 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0210 	mvn.w	r2, #16
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fc fdf0 	bl	8000704 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa87 	bl	800403a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa8e 	bl	800404e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10e      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0201 	mvn.w	r2, #1
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fc fdb6 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b80      	cmp	r3, #128	; 0x80
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 ff34 	bl	80049f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d10e      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d107      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa53 	bl	8004062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0220 	mvn.w	r2, #32
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fefe 	bl	80049e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e088      	b.n	8003d20 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11b      	bne.n	8003c54 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f000 fc74 	bl	8004518 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699a      	ldr	r2, [r3, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 020c 	bic.w	r2, r2, #12
 8003c3e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6999      	ldr	r1, [r3, #24]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	689a      	ldr	r2, [r3, #8]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	619a      	str	r2, [r3, #24]
 8003c52:	e060      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d11c      	bne.n	8003c94 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6819      	ldr	r1, [r3, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f000 fcf8 	bl	800465e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c7c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6999      	ldr	r1, [r3, #24]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	021a      	lsls	r2, r3, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	619a      	str	r2, [r3, #24]
 8003c92:	e040      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d11b      	bne.n	8003cd2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f000 fd45 	bl	8004738 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 020c 	bic.w	r2, r2, #12
 8003cbc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	61da      	str	r2, [r3, #28]
 8003cd0:	e021      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d11c      	bne.n	8003d12 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f000 fd62 	bl	80047b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	69d9      	ldr	r1, [r3, #28]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	021a      	lsls	r2, r3, #8
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	61da      	str	r2, [r3, #28]
 8003d10:	e001      	b.n	8003d16 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0ae      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	f200 809f 	bhi.w	8003e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003e95 	.word	0x08003e95
 8003d64:	08003e95 	.word	0x08003e95
 8003d68:	08003e95 	.word	0x08003e95
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003e95 	.word	0x08003e95
 8003d74:	08003e95 	.word	0x08003e95
 8003d78:	08003e95 	.word	0x08003e95
 8003d7c:	08003e13 	.word	0x08003e13
 8003d80:	08003e95 	.word	0x08003e95
 8003d84:	08003e95 	.word	0x08003e95
 8003d88:	08003e95 	.word	0x08003e95
 8003d8c:	08003e53 	.word	0x08003e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fa0e 	bl	80041b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      break;
 8003dce:	e064      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fa5e 	bl	8004298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
      break;
 8003e10:	e043      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fab3 	bl	8004384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0208 	orr.w	r2, r2, #8
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0204 	bic.w	r2, r2, #4
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
      break;
 8003e50:	e023      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fb07 	bl	800446c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	61da      	str	r2, [r3, #28]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0b4      	b.n	8004032 <HAL_TIM_ConfigClockSource+0x186>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f00:	d03e      	beq.n	8003f80 <HAL_TIM_ConfigClockSource+0xd4>
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f06:	f200 8087 	bhi.w	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	f000 8086 	beq.w	800401e <HAL_TIM_ConfigClockSource+0x172>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d87f      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f18:	2b70      	cmp	r3, #112	; 0x70
 8003f1a:	d01a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xa6>
 8003f1c:	2b70      	cmp	r3, #112	; 0x70
 8003f1e:	d87b      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b60      	cmp	r3, #96	; 0x60
 8003f22:	d050      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x11a>
 8003f24:	2b60      	cmp	r3, #96	; 0x60
 8003f26:	d877      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b50      	cmp	r3, #80	; 0x50
 8003f2a:	d03c      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0xfa>
 8003f2c:	2b50      	cmp	r3, #80	; 0x50
 8003f2e:	d873      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d058      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x13a>
 8003f34:	2b40      	cmp	r3, #64	; 0x40
 8003f36:	d86f      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	d064      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	2b30      	cmp	r3, #48	; 0x30
 8003f3e:	d86b      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d060      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d867      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05c      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d05a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x15a>
 8003f50:	e062      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6899      	ldr	r1, [r3, #8]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f000 fc7d 	bl	8004860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	609a      	str	r2, [r3, #8]
      break;
 8003f7e:	e04f      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f000 fc66 	bl	8004860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa2:	609a      	str	r2, [r3, #8]
      break;
 8003fa4:	e03c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f000 fb24 	bl	8004600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2150      	movs	r1, #80	; 0x50
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fc33 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8003fc4:	e02c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f000 fb80 	bl	80046d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2160      	movs	r1, #96	; 0x60
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fc23 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e01c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f000 fb04 	bl	8004600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fc13 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004004:	e00c      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f000 fc0a 	bl	800482a <TIM_ITRx_SetConfig>
      break;
 8004016:	e003      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e000      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800401e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a40      	ldr	r2, [pc, #256]	; (800418c <TIM_Base_SetConfig+0x114>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d013      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d00f      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <TIM_Base_SetConfig+0x118>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00b      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <TIM_Base_SetConfig+0x11c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d007      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3b      	ldr	r2, [pc, #236]	; (8004198 <TIM_Base_SetConfig+0x120>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3a      	ldr	r2, [pc, #232]	; (800419c <TIM_Base_SetConfig+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d108      	bne.n	80040ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2f      	ldr	r2, [pc, #188]	; (800418c <TIM_Base_SetConfig+0x114>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02b      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d8:	d027      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a2c      	ldr	r2, [pc, #176]	; (8004190 <TIM_Base_SetConfig+0x118>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d023      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2b      	ldr	r2, [pc, #172]	; (8004194 <TIM_Base_SetConfig+0x11c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <TIM_Base_SetConfig+0x120>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d01b      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a29      	ldr	r2, [pc, #164]	; (800419c <TIM_Base_SetConfig+0x124>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d017      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <TIM_Base_SetConfig+0x128>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a27      	ldr	r2, [pc, #156]	; (80041a4 <TIM_Base_SetConfig+0x12c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <TIM_Base_SetConfig+0x130>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00b      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a25      	ldr	r2, [pc, #148]	; (80041ac <TIM_Base_SetConfig+0x134>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a24      	ldr	r2, [pc, #144]	; (80041b0 <TIM_Base_SetConfig+0x138>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <TIM_Base_SetConfig+0x13c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d108      	bne.n	800413c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <TIM_Base_SetConfig+0x114>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0xf8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a0c      	ldr	r2, [pc, #48]	; (800419c <TIM_Base_SetConfig+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d103      	bne.n	8004178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	615a      	str	r2, [r3, #20]
}
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40010000 	.word	0x40010000
 8004190:	40000400 	.word	0x40000400
 8004194:	40000800 	.word	0x40000800
 8004198:	40000c00 	.word	0x40000c00
 800419c:	40010400 	.word	0x40010400
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40014400 	.word	0x40014400
 80041a8:	40014800 	.word	0x40014800
 80041ac:	40001800 	.word	0x40001800
 80041b0:	40001c00 	.word	0x40001c00
 80041b4:	40002000 	.word	0x40002000

080041b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0201 	bic.w	r2, r3, #1
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 0302 	bic.w	r3, r3, #2
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a20      	ldr	r2, [pc, #128]	; (8004290 <TIM_OC1_SetConfig+0xd8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_OC1_SetConfig+0x64>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a1f      	ldr	r2, [pc, #124]	; (8004294 <TIM_OC1_SetConfig+0xdc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d10c      	bne.n	8004236 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0308 	bic.w	r3, r3, #8
 8004222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <TIM_OC1_SetConfig+0xd8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_OC1_SetConfig+0x8e>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <TIM_OC1_SetConfig+0xdc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d111      	bne.n	800426a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	621a      	str	r2, [r3, #32]
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40010000 	.word	0x40010000
 8004294:	40010400 	.word	0x40010400

08004298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f023 0210 	bic.w	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0320 	bic.w	r3, r3, #32
 80042e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a22      	ldr	r2, [pc, #136]	; (800437c <TIM_OC2_SetConfig+0xe4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC2_SetConfig+0x68>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <TIM_OC2_SetConfig+0xe8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10d      	bne.n	800431c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <TIM_OC2_SetConfig+0xe4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_OC2_SetConfig+0x94>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <TIM_OC2_SetConfig+0xe8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d113      	bne.n	8004354 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40010400 	.word	0x40010400

08004384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0303 	bic.w	r3, r3, #3
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <TIM_OC3_SetConfig+0xe0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_OC3_SetConfig+0x66>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <TIM_OC3_SetConfig+0xe4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10d      	bne.n	8004406 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a16      	ldr	r2, [pc, #88]	; (8004464 <TIM_OC3_SetConfig+0xe0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_OC3_SetConfig+0x92>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a15      	ldr	r2, [pc, #84]	; (8004468 <TIM_OC3_SetConfig+0xe4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d113      	bne.n	800443e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40010000 	.word	0x40010000
 8004468:	40010400 	.word	0x40010400

0800446c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	021b      	lsls	r3, r3, #8
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <TIM_OC4_SetConfig+0xa4>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_OC4_SetConfig+0x68>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a11      	ldr	r2, [pc, #68]	; (8004514 <TIM_OC4_SetConfig+0xa8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d109      	bne.n	80044e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010000 	.word	0x40010000
 8004514:	40010400 	.word	0x40010400

08004518 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0201 	bic.w	r2, r3, #1
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <TIM_TI1_SetConfig+0xcc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01b      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d017      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <TIM_TI1_SetConfig+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a24      	ldr	r2, [pc, #144]	; (80045ec <TIM_TI1_SetConfig+0xd4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00f      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <TIM_TI1_SetConfig+0xd8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00b      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <TIM_TI1_SetConfig+0xdc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d007      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <TIM_TI1_SetConfig+0xe0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d003      	beq.n	800457e <TIM_TI1_SetConfig+0x66>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a20      	ldr	r2, [pc, #128]	; (80045fc <TIM_TI1_SetConfig+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <TIM_TI1_SetConfig+0x6a>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <TIM_TI1_SetConfig+0x6c>
 8004582:	2300      	movs	r3, #0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e003      	b.n	80045a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f023 030a 	bic.w	r3, r3, #10
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 030a 	and.w	r3, r3, #10
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40010400 	.word	0x40010400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40001800 	.word	0x40001800

08004600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 030a 	bic.w	r3, r3, #10
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800465e:	b480      	push	{r7}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 0210 	bic.w	r2, r3, #16
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800469c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	031b      	lsls	r3, r3, #12
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f023 0210 	bic.w	r2, r3, #16
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	621a      	str	r2, [r3, #32]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004774:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	b2db      	uxtb	r3, r3
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004788:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004802:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	031b      	lsls	r3, r3, #12
 8004808:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	621a      	str	r2, [r3, #32]
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	f043 0307 	orr.w	r3, r3, #7
 800484c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	431a      	orrs	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2201      	movs	r2, #1
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	fa01 f303 	lsl.w	r3, r1, r3
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004900:	2302      	movs	r3, #2
 8004902:	e05a      	b.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a21      	ldr	r2, [pc, #132]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d01d      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1d      	ldr	r2, [pc, #116]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d018      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10c      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4313      	orrs	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800
 80049d4:	40000c00 	.word	0x40000c00
 80049d8:	40010400 	.word	0x40010400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40001800 	.word	0x40001800

080049e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e03f      	b.n	8004a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc ff72 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f929 	bl	8004ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08a      	sub	sp, #40	; 0x28
 8004aaa:	af02      	add	r7, sp, #8
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d17c      	bne.n	8004bc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_UART_Transmit+0x2c>
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e075      	b.n	8004bc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Transmit+0x3e>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e06e      	b.n	8004bc2 <HAL_UART_Transmit+0x11c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2221      	movs	r2, #33	; 0x21
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004afa:	f7fd f939 	bl	8001d70 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	88fa      	ldrh	r2, [r7, #6]
 8004b0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d108      	bne.n	8004b28 <HAL_UART_Transmit+0x82>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	e003      	b.n	8004b30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b38:	e02a      	b.n	8004b90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2200      	movs	r2, #0
 8004b42:	2180      	movs	r1, #128	; 0x80
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f840 	bl	8004bca <UART_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e036      	b.n	8004bc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e007      	b.n	8004b82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1cf      	bne.n	8004b3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2140      	movs	r1, #64	; 0x40
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 f810 	bl	8004bca <UART_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e006      	b.n	8004bc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b090      	sub	sp, #64	; 0x40
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bda:	e050      	b.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d04c      	beq.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8004bea:	f7fd f8c1 	bl	8001d70 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d241      	bcs.n	8004c7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c1a:	637a      	str	r2, [r7, #52]	; 0x34
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e5      	bne.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3314      	adds	r3, #20
 8004c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4e:	623a      	str	r2, [r7, #32]
 8004c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	69f9      	ldr	r1, [r7, #28]
 8004c54:	6a3a      	ldr	r2, [r7, #32]
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e00f      	b.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	4013      	ands	r3, r2
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	bf0c      	ite	eq
 8004c8e:	2301      	moveq	r3, #1
 8004c90:	2300      	movne	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d09f      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3740      	adds	r7, #64	; 0x40
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	b09f      	sub	sp, #124	; 0x7c
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	68d9      	ldr	r1, [r3, #12]
 8004cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	ea40 0301 	orr.w	r3, r0, r1
 8004cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cec:	f021 010c 	bic.w	r1, r1, #12
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	6999      	ldr	r1, [r3, #24]
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	ea40 0301 	orr.w	r3, r0, r1
 8004d10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4bc5      	ldr	r3, [pc, #788]	; (800502c <UART_SetConfig+0x384>)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d004      	beq.n	8004d26 <UART_SetConfig+0x7e>
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4bc3      	ldr	r3, [pc, #780]	; (8005030 <UART_SetConfig+0x388>)
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d103      	bne.n	8004d2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d26:	f7fd ffd1 	bl	8002ccc <HAL_RCC_GetPCLK2Freq>
 8004d2a:	6778      	str	r0, [r7, #116]	; 0x74
 8004d2c:	e002      	b.n	8004d34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d2e:	f7fd ffb9 	bl	8002ca4 <HAL_RCC_GetPCLK1Freq>
 8004d32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3c:	f040 80b6 	bne.w	8004eac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d42:	461c      	mov	r4, r3
 8004d44:	f04f 0500 	mov.w	r5, #0
 8004d48:	4622      	mov	r2, r4
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	6439      	str	r1, [r7, #64]	; 0x40
 8004d50:	415b      	adcs	r3, r3
 8004d52:	647b      	str	r3, [r7, #68]	; 0x44
 8004d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d58:	1912      	adds	r2, r2, r4
 8004d5a:	eb45 0303 	adc.w	r3, r5, r3
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	00d9      	lsls	r1, r3, #3
 8004d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6c:	00d0      	lsls	r0, r2, #3
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	1911      	adds	r1, r2, r4
 8004d74:	6639      	str	r1, [r7, #96]	; 0x60
 8004d76:	416b      	adcs	r3, r5
 8004d78:	667b      	str	r3, [r7, #100]	; 0x64
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	1891      	adds	r1, r2, r2
 8004d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d94:	f7fb fa7c 	bl	8000290 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4ba5      	ldr	r3, [pc, #660]	; (8005034 <UART_SetConfig+0x38c>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011e      	lsls	r6, r3, #4
 8004da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da8:	461c      	mov	r4, r3
 8004daa:	f04f 0500 	mov.w	r5, #0
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	6339      	str	r1, [r7, #48]	; 0x30
 8004db6:	415b      	adcs	r3, r3
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dbe:	1912      	adds	r2, r2, r4
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	00d9      	lsls	r1, r3, #3
 8004dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd2:	00d0      	lsls	r0, r2, #3
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	1911      	adds	r1, r2, r4
 8004dda:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ddc:	416b      	adcs	r3, r5
 8004dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	461a      	mov	r2, r3
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	1891      	adds	r1, r2, r2
 8004dec:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dee:	415b      	adcs	r3, r3
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dfa:	f7fb fa49 	bl	8000290 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b8c      	ldr	r3, [pc, #560]	; (8005034 <UART_SetConfig+0x38c>)
 8004e04:	fba3 1302 	umull	r1, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2164      	movs	r1, #100	; 0x64
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3332      	adds	r3, #50	; 0x32
 8004e16:	4a87      	ldr	r2, [pc, #540]	; (8005034 <UART_SetConfig+0x38c>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e24:	441e      	add	r6, r3
 8004e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	1894      	adds	r4, r2, r2
 8004e34:	623c      	str	r4, [r7, #32]
 8004e36:	415b      	adcs	r3, r3
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e3e:	1812      	adds	r2, r2, r0
 8004e40:	eb41 0303 	adc.w	r3, r1, r3
 8004e44:	f04f 0400 	mov.w	r4, #0
 8004e48:	f04f 0500 	mov.w	r5, #0
 8004e4c:	00dd      	lsls	r5, r3, #3
 8004e4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e52:	00d4      	lsls	r4, r2, #3
 8004e54:	4622      	mov	r2, r4
 8004e56:	462b      	mov	r3, r5
 8004e58:	1814      	adds	r4, r2, r0
 8004e5a:	653c      	str	r4, [r7, #80]	; 0x50
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	1891      	adds	r1, r2, r2
 8004e6c:	61b9      	str	r1, [r7, #24]
 8004e6e:	415b      	adcs	r3, r3
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e7a:	f7fb fa09 	bl	8000290 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <UART_SetConfig+0x38c>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	; 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	3332      	adds	r3, #50	; 0x32
 8004e96:	4a67      	ldr	r2, [pc, #412]	; (8005034 <UART_SetConfig+0x38c>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 0207 	and.w	r2, r3, #7
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4432      	add	r2, r6
 8004ea8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eaa:	e0b9      	b.n	8005020 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eae:	461c      	mov	r4, r3
 8004eb0:	f04f 0500 	mov.w	r5, #0
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	1891      	adds	r1, r2, r2
 8004eba:	6139      	str	r1, [r7, #16]
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ec4:	1912      	adds	r2, r2, r4
 8004ec6:	eb45 0303 	adc.w	r3, r5, r3
 8004eca:	f04f 0000 	mov.w	r0, #0
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	00d9      	lsls	r1, r3, #3
 8004ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed8:	00d0      	lsls	r0, r2, #3
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	eb12 0804 	adds.w	r8, r2, r4
 8004ee2:	eb43 0905 	adc.w	r9, r3, r5
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	008b      	lsls	r3, r1, #2
 8004efa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004efe:	0082      	lsls	r2, r0, #2
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb f9c4 	bl	8000290 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b49      	ldr	r3, [pc, #292]	; (8005034 <UART_SetConfig+0x38c>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011e      	lsls	r6, r3, #4
 8004f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	1894      	adds	r4, r2, r2
 8004f24:	60bc      	str	r4, [r7, #8]
 8004f26:	415b      	adcs	r3, r3
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f2e:	1812      	adds	r2, r2, r0
 8004f30:	eb41 0303 	adc.w	r3, r1, r3
 8004f34:	f04f 0400 	mov.w	r4, #0
 8004f38:	f04f 0500 	mov.w	r5, #0
 8004f3c:	00dd      	lsls	r5, r3, #3
 8004f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f42:	00d4      	lsls	r4, r2, #3
 8004f44:	4622      	mov	r2, r4
 8004f46:	462b      	mov	r3, r5
 8004f48:	1814      	adds	r4, r2, r0
 8004f4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f4c:	414b      	adcs	r3, r1
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	008b      	lsls	r3, r1, #2
 8004f64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f68:	0082      	lsls	r2, r0, #2
 8004f6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f6e:	f7fb f98f 	bl	8000290 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <UART_SetConfig+0x38c>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	; 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	3332      	adds	r3, #50	; 0x32
 8004f8a:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <UART_SetConfig+0x38c>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f96:	441e      	add	r6, r3
 8004f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	1894      	adds	r4, r2, r2
 8004fa6:	603c      	str	r4, [r7, #0]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb0:	1812      	adds	r2, r2, r0
 8004fb2:	eb41 0303 	adc.w	r3, r1, r3
 8004fb6:	f04f 0400 	mov.w	r4, #0
 8004fba:	f04f 0500 	mov.w	r5, #0
 8004fbe:	00dd      	lsls	r5, r3, #3
 8004fc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fc4:	00d4      	lsls	r4, r2, #3
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	eb12 0a00 	adds.w	sl, r2, r0
 8004fce:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fea:	0082      	lsls	r2, r0, #2
 8004fec:	4650      	mov	r0, sl
 8004fee:	4659      	mov	r1, fp
 8004ff0:	f7fb f94e 	bl	8000290 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <UART_SetConfig+0x38c>)
 8004ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2164      	movs	r1, #100	; 0x64
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	3332      	adds	r3, #50	; 0x32
 800500c:	4a09      	ldr	r2, [pc, #36]	; (8005034 <UART_SetConfig+0x38c>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f003 020f 	and.w	r2, r3, #15
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4432      	add	r2, r6
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	377c      	adds	r7, #124	; 0x7c
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502a:	bf00      	nop
 800502c:	40011000 	.word	0x40011000
 8005030:	40011400 	.word	0x40011400
 8005034:	51eb851f 	.word	0x51eb851f

08005038 <__errno>:
 8005038:	4b01      	ldr	r3, [pc, #4]	; (8005040 <__errno+0x8>)
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	2000000c 	.word	0x2000000c

08005044 <__libc_init_array>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4d0d      	ldr	r5, [pc, #52]	; (800507c <__libc_init_array+0x38>)
 8005048:	4c0d      	ldr	r4, [pc, #52]	; (8005080 <__libc_init_array+0x3c>)
 800504a:	1b64      	subs	r4, r4, r5
 800504c:	10a4      	asrs	r4, r4, #2
 800504e:	2600      	movs	r6, #0
 8005050:	42a6      	cmp	r6, r4
 8005052:	d109      	bne.n	8005068 <__libc_init_array+0x24>
 8005054:	4d0b      	ldr	r5, [pc, #44]	; (8005084 <__libc_init_array+0x40>)
 8005056:	4c0c      	ldr	r4, [pc, #48]	; (8005088 <__libc_init_array+0x44>)
 8005058:	f000 ff76 	bl	8005f48 <_init>
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	2600      	movs	r6, #0
 8005062:	42a6      	cmp	r6, r4
 8005064:	d105      	bne.n	8005072 <__libc_init_array+0x2e>
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	f855 3b04 	ldr.w	r3, [r5], #4
 800506c:	4798      	blx	r3
 800506e:	3601      	adds	r6, #1
 8005070:	e7ee      	b.n	8005050 <__libc_init_array+0xc>
 8005072:	f855 3b04 	ldr.w	r3, [r5], #4
 8005076:	4798      	blx	r3
 8005078:	3601      	adds	r6, #1
 800507a:	e7f2      	b.n	8005062 <__libc_init_array+0x1e>
 800507c:	08006020 	.word	0x08006020
 8005080:	08006020 	.word	0x08006020
 8005084:	08006020 	.word	0x08006020
 8005088:	08006024 	.word	0x08006024

0800508c <memset>:
 800508c:	4402      	add	r2, r0
 800508e:	4603      	mov	r3, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	d100      	bne.n	8005096 <memset+0xa>
 8005094:	4770      	bx	lr
 8005096:	f803 1b01 	strb.w	r1, [r3], #1
 800509a:	e7f9      	b.n	8005090 <memset+0x4>

0800509c <iprintf>:
 800509c:	b40f      	push	{r0, r1, r2, r3}
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <iprintf+0x2c>)
 80050a0:	b513      	push	{r0, r1, r4, lr}
 80050a2:	681c      	ldr	r4, [r3, #0]
 80050a4:	b124      	cbz	r4, 80050b0 <iprintf+0x14>
 80050a6:	69a3      	ldr	r3, [r4, #24]
 80050a8:	b913      	cbnz	r3, 80050b0 <iprintf+0x14>
 80050aa:	4620      	mov	r0, r4
 80050ac:	f000 f866 	bl	800517c <__sinit>
 80050b0:	ab05      	add	r3, sp, #20
 80050b2:	9a04      	ldr	r2, [sp, #16]
 80050b4:	68a1      	ldr	r1, [r4, #8]
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 f983 	bl	80053c4 <_vfiprintf_r>
 80050be:	b002      	add	sp, #8
 80050c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050c4:	b004      	add	sp, #16
 80050c6:	4770      	bx	lr
 80050c8:	2000000c 	.word	0x2000000c

080050cc <std>:
 80050cc:	2300      	movs	r3, #0
 80050ce:	b510      	push	{r4, lr}
 80050d0:	4604      	mov	r4, r0
 80050d2:	e9c0 3300 	strd	r3, r3, [r0]
 80050d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050da:	6083      	str	r3, [r0, #8]
 80050dc:	8181      	strh	r1, [r0, #12]
 80050de:	6643      	str	r3, [r0, #100]	; 0x64
 80050e0:	81c2      	strh	r2, [r0, #14]
 80050e2:	6183      	str	r3, [r0, #24]
 80050e4:	4619      	mov	r1, r3
 80050e6:	2208      	movs	r2, #8
 80050e8:	305c      	adds	r0, #92	; 0x5c
 80050ea:	f7ff ffcf 	bl	800508c <memset>
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <std+0x38>)
 80050f0:	6263      	str	r3, [r4, #36]	; 0x24
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <std+0x3c>)
 80050f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <std+0x40>)
 80050f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050fa:	4b05      	ldr	r3, [pc, #20]	; (8005110 <std+0x44>)
 80050fc:	6224      	str	r4, [r4, #32]
 80050fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005100:	bd10      	pop	{r4, pc}
 8005102:	bf00      	nop
 8005104:	0800596d 	.word	0x0800596d
 8005108:	0800598f 	.word	0x0800598f
 800510c:	080059c7 	.word	0x080059c7
 8005110:	080059eb 	.word	0x080059eb

08005114 <_cleanup_r>:
 8005114:	4901      	ldr	r1, [pc, #4]	; (800511c <_cleanup_r+0x8>)
 8005116:	f000 b8af 	b.w	8005278 <_fwalk_reent>
 800511a:	bf00      	nop
 800511c:	08005cc5 	.word	0x08005cc5

08005120 <__sfmoreglue>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	1e4a      	subs	r2, r1, #1
 8005124:	2568      	movs	r5, #104	; 0x68
 8005126:	4355      	muls	r5, r2
 8005128:	460e      	mov	r6, r1
 800512a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800512e:	f000 f8c5 	bl	80052bc <_malloc_r>
 8005132:	4604      	mov	r4, r0
 8005134:	b140      	cbz	r0, 8005148 <__sfmoreglue+0x28>
 8005136:	2100      	movs	r1, #0
 8005138:	e9c0 1600 	strd	r1, r6, [r0]
 800513c:	300c      	adds	r0, #12
 800513e:	60a0      	str	r0, [r4, #8]
 8005140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005144:	f7ff ffa2 	bl	800508c <memset>
 8005148:	4620      	mov	r0, r4
 800514a:	bd70      	pop	{r4, r5, r6, pc}

0800514c <__sfp_lock_acquire>:
 800514c:	4801      	ldr	r0, [pc, #4]	; (8005154 <__sfp_lock_acquire+0x8>)
 800514e:	f000 b8b3 	b.w	80052b8 <__retarget_lock_acquire_recursive>
 8005152:	bf00      	nop
 8005154:	2000027c 	.word	0x2000027c

08005158 <__sfp_lock_release>:
 8005158:	4801      	ldr	r0, [pc, #4]	; (8005160 <__sfp_lock_release+0x8>)
 800515a:	f000 b8ae 	b.w	80052ba <__retarget_lock_release_recursive>
 800515e:	bf00      	nop
 8005160:	2000027c 	.word	0x2000027c

08005164 <__sinit_lock_acquire>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__sinit_lock_acquire+0x8>)
 8005166:	f000 b8a7 	b.w	80052b8 <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	20000277 	.word	0x20000277

08005170 <__sinit_lock_release>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sinit_lock_release+0x8>)
 8005172:	f000 b8a2 	b.w	80052ba <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	20000277 	.word	0x20000277

0800517c <__sinit>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4604      	mov	r4, r0
 8005180:	f7ff fff0 	bl	8005164 <__sinit_lock_acquire>
 8005184:	69a3      	ldr	r3, [r4, #24]
 8005186:	b11b      	cbz	r3, 8005190 <__sinit+0x14>
 8005188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800518c:	f7ff bff0 	b.w	8005170 <__sinit_lock_release>
 8005190:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005194:	6523      	str	r3, [r4, #80]	; 0x50
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <__sinit+0x68>)
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <__sinit+0x6c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	62a2      	str	r2, [r4, #40]	; 0x28
 800519e:	42a3      	cmp	r3, r4
 80051a0:	bf04      	itt	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	61a3      	streq	r3, [r4, #24]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f820 	bl	80051ec <__sfp>
 80051ac:	6060      	str	r0, [r4, #4]
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 f81c 	bl	80051ec <__sfp>
 80051b4:	60a0      	str	r0, [r4, #8]
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 f818 	bl	80051ec <__sfp>
 80051bc:	2200      	movs	r2, #0
 80051be:	60e0      	str	r0, [r4, #12]
 80051c0:	2104      	movs	r1, #4
 80051c2:	6860      	ldr	r0, [r4, #4]
 80051c4:	f7ff ff82 	bl	80050cc <std>
 80051c8:	68a0      	ldr	r0, [r4, #8]
 80051ca:	2201      	movs	r2, #1
 80051cc:	2109      	movs	r1, #9
 80051ce:	f7ff ff7d 	bl	80050cc <std>
 80051d2:	68e0      	ldr	r0, [r4, #12]
 80051d4:	2202      	movs	r2, #2
 80051d6:	2112      	movs	r1, #18
 80051d8:	f7ff ff78 	bl	80050cc <std>
 80051dc:	2301      	movs	r3, #1
 80051de:	61a3      	str	r3, [r4, #24]
 80051e0:	e7d2      	b.n	8005188 <__sinit+0xc>
 80051e2:	bf00      	nop
 80051e4:	08005f80 	.word	0x08005f80
 80051e8:	08005115 	.word	0x08005115

080051ec <__sfp>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	4607      	mov	r7, r0
 80051f0:	f7ff ffac 	bl	800514c <__sfp_lock_acquire>
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <__sfp+0x84>)
 80051f6:	681e      	ldr	r6, [r3, #0]
 80051f8:	69b3      	ldr	r3, [r6, #24]
 80051fa:	b913      	cbnz	r3, 8005202 <__sfp+0x16>
 80051fc:	4630      	mov	r0, r6
 80051fe:	f7ff ffbd 	bl	800517c <__sinit>
 8005202:	3648      	adds	r6, #72	; 0x48
 8005204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005208:	3b01      	subs	r3, #1
 800520a:	d503      	bpl.n	8005214 <__sfp+0x28>
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	b30b      	cbz	r3, 8005254 <__sfp+0x68>
 8005210:	6836      	ldr	r6, [r6, #0]
 8005212:	e7f7      	b.n	8005204 <__sfp+0x18>
 8005214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005218:	b9d5      	cbnz	r5, 8005250 <__sfp+0x64>
 800521a:	4b16      	ldr	r3, [pc, #88]	; (8005274 <__sfp+0x88>)
 800521c:	60e3      	str	r3, [r4, #12]
 800521e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005222:	6665      	str	r5, [r4, #100]	; 0x64
 8005224:	f000 f847 	bl	80052b6 <__retarget_lock_init_recursive>
 8005228:	f7ff ff96 	bl	8005158 <__sfp_lock_release>
 800522c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005230:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005234:	6025      	str	r5, [r4, #0]
 8005236:	61a5      	str	r5, [r4, #24]
 8005238:	2208      	movs	r2, #8
 800523a:	4629      	mov	r1, r5
 800523c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005240:	f7ff ff24 	bl	800508c <memset>
 8005244:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005248:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800524c:	4620      	mov	r0, r4
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	3468      	adds	r4, #104	; 0x68
 8005252:	e7d9      	b.n	8005208 <__sfp+0x1c>
 8005254:	2104      	movs	r1, #4
 8005256:	4638      	mov	r0, r7
 8005258:	f7ff ff62 	bl	8005120 <__sfmoreglue>
 800525c:	4604      	mov	r4, r0
 800525e:	6030      	str	r0, [r6, #0]
 8005260:	2800      	cmp	r0, #0
 8005262:	d1d5      	bne.n	8005210 <__sfp+0x24>
 8005264:	f7ff ff78 	bl	8005158 <__sfp_lock_release>
 8005268:	230c      	movs	r3, #12
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	e7ee      	b.n	800524c <__sfp+0x60>
 800526e:	bf00      	nop
 8005270:	08005f80 	.word	0x08005f80
 8005274:	ffff0001 	.word	0xffff0001

08005278 <_fwalk_reent>:
 8005278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800527c:	4606      	mov	r6, r0
 800527e:	4688      	mov	r8, r1
 8005280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005284:	2700      	movs	r7, #0
 8005286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800528a:	f1b9 0901 	subs.w	r9, r9, #1
 800528e:	d505      	bpl.n	800529c <_fwalk_reent+0x24>
 8005290:	6824      	ldr	r4, [r4, #0]
 8005292:	2c00      	cmp	r4, #0
 8005294:	d1f7      	bne.n	8005286 <_fwalk_reent+0xe>
 8005296:	4638      	mov	r0, r7
 8005298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800529c:	89ab      	ldrh	r3, [r5, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d907      	bls.n	80052b2 <_fwalk_reent+0x3a>
 80052a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052a6:	3301      	adds	r3, #1
 80052a8:	d003      	beq.n	80052b2 <_fwalk_reent+0x3a>
 80052aa:	4629      	mov	r1, r5
 80052ac:	4630      	mov	r0, r6
 80052ae:	47c0      	blx	r8
 80052b0:	4307      	orrs	r7, r0
 80052b2:	3568      	adds	r5, #104	; 0x68
 80052b4:	e7e9      	b.n	800528a <_fwalk_reent+0x12>

080052b6 <__retarget_lock_init_recursive>:
 80052b6:	4770      	bx	lr

080052b8 <__retarget_lock_acquire_recursive>:
 80052b8:	4770      	bx	lr

080052ba <__retarget_lock_release_recursive>:
 80052ba:	4770      	bx	lr

080052bc <_malloc_r>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	1ccd      	adds	r5, r1, #3
 80052c0:	f025 0503 	bic.w	r5, r5, #3
 80052c4:	3508      	adds	r5, #8
 80052c6:	2d0c      	cmp	r5, #12
 80052c8:	bf38      	it	cc
 80052ca:	250c      	movcc	r5, #12
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	4606      	mov	r6, r0
 80052d0:	db01      	blt.n	80052d6 <_malloc_r+0x1a>
 80052d2:	42a9      	cmp	r1, r5
 80052d4:	d903      	bls.n	80052de <_malloc_r+0x22>
 80052d6:	230c      	movs	r3, #12
 80052d8:	6033      	str	r3, [r6, #0]
 80052da:	2000      	movs	r0, #0
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052de:	f000 fda3 	bl	8005e28 <__malloc_lock>
 80052e2:	4921      	ldr	r1, [pc, #132]	; (8005368 <_malloc_r+0xac>)
 80052e4:	680a      	ldr	r2, [r1, #0]
 80052e6:	4614      	mov	r4, r2
 80052e8:	b99c      	cbnz	r4, 8005312 <_malloc_r+0x56>
 80052ea:	4f20      	ldr	r7, [pc, #128]	; (800536c <_malloc_r+0xb0>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b923      	cbnz	r3, 80052fa <_malloc_r+0x3e>
 80052f0:	4621      	mov	r1, r4
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 fb2a 	bl	800594c <_sbrk_r>
 80052f8:	6038      	str	r0, [r7, #0]
 80052fa:	4629      	mov	r1, r5
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 fb25 	bl	800594c <_sbrk_r>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d123      	bne.n	800534e <_malloc_r+0x92>
 8005306:	230c      	movs	r3, #12
 8005308:	6033      	str	r3, [r6, #0]
 800530a:	4630      	mov	r0, r6
 800530c:	f000 fd92 	bl	8005e34 <__malloc_unlock>
 8005310:	e7e3      	b.n	80052da <_malloc_r+0x1e>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	1b5b      	subs	r3, r3, r5
 8005316:	d417      	bmi.n	8005348 <_malloc_r+0x8c>
 8005318:	2b0b      	cmp	r3, #11
 800531a:	d903      	bls.n	8005324 <_malloc_r+0x68>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	441c      	add	r4, r3
 8005320:	6025      	str	r5, [r4, #0]
 8005322:	e004      	b.n	800532e <_malloc_r+0x72>
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	42a2      	cmp	r2, r4
 8005328:	bf0c      	ite	eq
 800532a:	600b      	streq	r3, [r1, #0]
 800532c:	6053      	strne	r3, [r2, #4]
 800532e:	4630      	mov	r0, r6
 8005330:	f000 fd80 	bl	8005e34 <__malloc_unlock>
 8005334:	f104 000b 	add.w	r0, r4, #11
 8005338:	1d23      	adds	r3, r4, #4
 800533a:	f020 0007 	bic.w	r0, r0, #7
 800533e:	1ac2      	subs	r2, r0, r3
 8005340:	d0cc      	beq.n	80052dc <_malloc_r+0x20>
 8005342:	1a1b      	subs	r3, r3, r0
 8005344:	50a3      	str	r3, [r4, r2]
 8005346:	e7c9      	b.n	80052dc <_malloc_r+0x20>
 8005348:	4622      	mov	r2, r4
 800534a:	6864      	ldr	r4, [r4, #4]
 800534c:	e7cc      	b.n	80052e8 <_malloc_r+0x2c>
 800534e:	1cc4      	adds	r4, r0, #3
 8005350:	f024 0403 	bic.w	r4, r4, #3
 8005354:	42a0      	cmp	r0, r4
 8005356:	d0e3      	beq.n	8005320 <_malloc_r+0x64>
 8005358:	1a21      	subs	r1, r4, r0
 800535a:	4630      	mov	r0, r6
 800535c:	f000 faf6 	bl	800594c <_sbrk_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d1dd      	bne.n	8005320 <_malloc_r+0x64>
 8005364:	e7cf      	b.n	8005306 <_malloc_r+0x4a>
 8005366:	bf00      	nop
 8005368:	20000090 	.word	0x20000090
 800536c:	20000094 	.word	0x20000094

08005370 <__sfputc_r>:
 8005370:	6893      	ldr	r3, [r2, #8]
 8005372:	3b01      	subs	r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	b410      	push	{r4}
 8005378:	6093      	str	r3, [r2, #8]
 800537a:	da08      	bge.n	800538e <__sfputc_r+0x1e>
 800537c:	6994      	ldr	r4, [r2, #24]
 800537e:	42a3      	cmp	r3, r4
 8005380:	db01      	blt.n	8005386 <__sfputc_r+0x16>
 8005382:	290a      	cmp	r1, #10
 8005384:	d103      	bne.n	800538e <__sfputc_r+0x1e>
 8005386:	f85d 4b04 	ldr.w	r4, [sp], #4
 800538a:	f000 bb33 	b.w	80059f4 <__swbuf_r>
 800538e:	6813      	ldr	r3, [r2, #0]
 8005390:	1c58      	adds	r0, r3, #1
 8005392:	6010      	str	r0, [r2, #0]
 8005394:	7019      	strb	r1, [r3, #0]
 8005396:	4608      	mov	r0, r1
 8005398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800539c:	4770      	bx	lr

0800539e <__sfputs_r>:
 800539e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a0:	4606      	mov	r6, r0
 80053a2:	460f      	mov	r7, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	18d5      	adds	r5, r2, r3
 80053a8:	42ac      	cmp	r4, r5
 80053aa:	d101      	bne.n	80053b0 <__sfputs_r+0x12>
 80053ac:	2000      	movs	r0, #0
 80053ae:	e007      	b.n	80053c0 <__sfputs_r+0x22>
 80053b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b4:	463a      	mov	r2, r7
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ffda 	bl	8005370 <__sfputc_r>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d1f3      	bne.n	80053a8 <__sfputs_r+0xa>
 80053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080053c4 <_vfiprintf_r>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	460d      	mov	r5, r1
 80053ca:	b09d      	sub	sp, #116	; 0x74
 80053cc:	4614      	mov	r4, r2
 80053ce:	4698      	mov	r8, r3
 80053d0:	4606      	mov	r6, r0
 80053d2:	b118      	cbz	r0, 80053dc <_vfiprintf_r+0x18>
 80053d4:	6983      	ldr	r3, [r0, #24]
 80053d6:	b90b      	cbnz	r3, 80053dc <_vfiprintf_r+0x18>
 80053d8:	f7ff fed0 	bl	800517c <__sinit>
 80053dc:	4b89      	ldr	r3, [pc, #548]	; (8005604 <_vfiprintf_r+0x240>)
 80053de:	429d      	cmp	r5, r3
 80053e0:	d11b      	bne.n	800541a <_vfiprintf_r+0x56>
 80053e2:	6875      	ldr	r5, [r6, #4]
 80053e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e6:	07d9      	lsls	r1, r3, #31
 80053e8:	d405      	bmi.n	80053f6 <_vfiprintf_r+0x32>
 80053ea:	89ab      	ldrh	r3, [r5, #12]
 80053ec:	059a      	lsls	r2, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_vfiprintf_r+0x32>
 80053f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053f2:	f7ff ff61 	bl	80052b8 <__retarget_lock_acquire_recursive>
 80053f6:	89ab      	ldrh	r3, [r5, #12]
 80053f8:	071b      	lsls	r3, r3, #28
 80053fa:	d501      	bpl.n	8005400 <_vfiprintf_r+0x3c>
 80053fc:	692b      	ldr	r3, [r5, #16]
 80053fe:	b9eb      	cbnz	r3, 800543c <_vfiprintf_r+0x78>
 8005400:	4629      	mov	r1, r5
 8005402:	4630      	mov	r0, r6
 8005404:	f000 fb5a 	bl	8005abc <__swsetup_r>
 8005408:	b1c0      	cbz	r0, 800543c <_vfiprintf_r+0x78>
 800540a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800540c:	07dc      	lsls	r4, r3, #31
 800540e:	d50e      	bpl.n	800542e <_vfiprintf_r+0x6a>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	b01d      	add	sp, #116	; 0x74
 8005416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541a:	4b7b      	ldr	r3, [pc, #492]	; (8005608 <_vfiprintf_r+0x244>)
 800541c:	429d      	cmp	r5, r3
 800541e:	d101      	bne.n	8005424 <_vfiprintf_r+0x60>
 8005420:	68b5      	ldr	r5, [r6, #8]
 8005422:	e7df      	b.n	80053e4 <_vfiprintf_r+0x20>
 8005424:	4b79      	ldr	r3, [pc, #484]	; (800560c <_vfiprintf_r+0x248>)
 8005426:	429d      	cmp	r5, r3
 8005428:	bf08      	it	eq
 800542a:	68f5      	ldreq	r5, [r6, #12]
 800542c:	e7da      	b.n	80053e4 <_vfiprintf_r+0x20>
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	0598      	lsls	r0, r3, #22
 8005432:	d4ed      	bmi.n	8005410 <_vfiprintf_r+0x4c>
 8005434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005436:	f7ff ff40 	bl	80052ba <__retarget_lock_release_recursive>
 800543a:	e7e9      	b.n	8005410 <_vfiprintf_r+0x4c>
 800543c:	2300      	movs	r3, #0
 800543e:	9309      	str	r3, [sp, #36]	; 0x24
 8005440:	2320      	movs	r3, #32
 8005442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005446:	f8cd 800c 	str.w	r8, [sp, #12]
 800544a:	2330      	movs	r3, #48	; 0x30
 800544c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005610 <_vfiprintf_r+0x24c>
 8005450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005454:	f04f 0901 	mov.w	r9, #1
 8005458:	4623      	mov	r3, r4
 800545a:	469a      	mov	sl, r3
 800545c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005460:	b10a      	cbz	r2, 8005466 <_vfiprintf_r+0xa2>
 8005462:	2a25      	cmp	r2, #37	; 0x25
 8005464:	d1f9      	bne.n	800545a <_vfiprintf_r+0x96>
 8005466:	ebba 0b04 	subs.w	fp, sl, r4
 800546a:	d00b      	beq.n	8005484 <_vfiprintf_r+0xc0>
 800546c:	465b      	mov	r3, fp
 800546e:	4622      	mov	r2, r4
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff ff93 	bl	800539e <__sfputs_r>
 8005478:	3001      	adds	r0, #1
 800547a:	f000 80aa 	beq.w	80055d2 <_vfiprintf_r+0x20e>
 800547e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005480:	445a      	add	r2, fp
 8005482:	9209      	str	r2, [sp, #36]	; 0x24
 8005484:	f89a 3000 	ldrb.w	r3, [sl]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80a2 	beq.w	80055d2 <_vfiprintf_r+0x20e>
 800548e:	2300      	movs	r3, #0
 8005490:	f04f 32ff 	mov.w	r2, #4294967295
 8005494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005498:	f10a 0a01 	add.w	sl, sl, #1
 800549c:	9304      	str	r3, [sp, #16]
 800549e:	9307      	str	r3, [sp, #28]
 80054a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054a4:	931a      	str	r3, [sp, #104]	; 0x68
 80054a6:	4654      	mov	r4, sl
 80054a8:	2205      	movs	r2, #5
 80054aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ae:	4858      	ldr	r0, [pc, #352]	; (8005610 <_vfiprintf_r+0x24c>)
 80054b0:	f7fa fe9e 	bl	80001f0 <memchr>
 80054b4:	9a04      	ldr	r2, [sp, #16]
 80054b6:	b9d8      	cbnz	r0, 80054f0 <_vfiprintf_r+0x12c>
 80054b8:	06d1      	lsls	r1, r2, #27
 80054ba:	bf44      	itt	mi
 80054bc:	2320      	movmi	r3, #32
 80054be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054c2:	0713      	lsls	r3, r2, #28
 80054c4:	bf44      	itt	mi
 80054c6:	232b      	movmi	r3, #43	; 0x2b
 80054c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054cc:	f89a 3000 	ldrb.w	r3, [sl]
 80054d0:	2b2a      	cmp	r3, #42	; 0x2a
 80054d2:	d015      	beq.n	8005500 <_vfiprintf_r+0x13c>
 80054d4:	9a07      	ldr	r2, [sp, #28]
 80054d6:	4654      	mov	r4, sl
 80054d8:	2000      	movs	r0, #0
 80054da:	f04f 0c0a 	mov.w	ip, #10
 80054de:	4621      	mov	r1, r4
 80054e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054e4:	3b30      	subs	r3, #48	; 0x30
 80054e6:	2b09      	cmp	r3, #9
 80054e8:	d94e      	bls.n	8005588 <_vfiprintf_r+0x1c4>
 80054ea:	b1b0      	cbz	r0, 800551a <_vfiprintf_r+0x156>
 80054ec:	9207      	str	r2, [sp, #28]
 80054ee:	e014      	b.n	800551a <_vfiprintf_r+0x156>
 80054f0:	eba0 0308 	sub.w	r3, r0, r8
 80054f4:	fa09 f303 	lsl.w	r3, r9, r3
 80054f8:	4313      	orrs	r3, r2
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	46a2      	mov	sl, r4
 80054fe:	e7d2      	b.n	80054a6 <_vfiprintf_r+0xe2>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d19      	adds	r1, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9103      	str	r1, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfbb      	ittet	lt
 800550c:	425b      	neglt	r3, r3
 800550e:	f042 0202 	orrlt.w	r2, r2, #2
 8005512:	9307      	strge	r3, [sp, #28]
 8005514:	9307      	strlt	r3, [sp, #28]
 8005516:	bfb8      	it	lt
 8005518:	9204      	strlt	r2, [sp, #16]
 800551a:	7823      	ldrb	r3, [r4, #0]
 800551c:	2b2e      	cmp	r3, #46	; 0x2e
 800551e:	d10c      	bne.n	800553a <_vfiprintf_r+0x176>
 8005520:	7863      	ldrb	r3, [r4, #1]
 8005522:	2b2a      	cmp	r3, #42	; 0x2a
 8005524:	d135      	bne.n	8005592 <_vfiprintf_r+0x1ce>
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	1d1a      	adds	r2, r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	9203      	str	r2, [sp, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfb8      	it	lt
 8005532:	f04f 33ff 	movlt.w	r3, #4294967295
 8005536:	3402      	adds	r4, #2
 8005538:	9305      	str	r3, [sp, #20]
 800553a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005620 <_vfiprintf_r+0x25c>
 800553e:	7821      	ldrb	r1, [r4, #0]
 8005540:	2203      	movs	r2, #3
 8005542:	4650      	mov	r0, sl
 8005544:	f7fa fe54 	bl	80001f0 <memchr>
 8005548:	b140      	cbz	r0, 800555c <_vfiprintf_r+0x198>
 800554a:	2340      	movs	r3, #64	; 0x40
 800554c:	eba0 000a 	sub.w	r0, r0, sl
 8005550:	fa03 f000 	lsl.w	r0, r3, r0
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	4303      	orrs	r3, r0
 8005558:	3401      	adds	r4, #1
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	482c      	ldr	r0, [pc, #176]	; (8005614 <_vfiprintf_r+0x250>)
 8005562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005566:	2206      	movs	r2, #6
 8005568:	f7fa fe42 	bl	80001f0 <memchr>
 800556c:	2800      	cmp	r0, #0
 800556e:	d03f      	beq.n	80055f0 <_vfiprintf_r+0x22c>
 8005570:	4b29      	ldr	r3, [pc, #164]	; (8005618 <_vfiprintf_r+0x254>)
 8005572:	bb1b      	cbnz	r3, 80055bc <_vfiprintf_r+0x1f8>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	3307      	adds	r3, #7
 8005578:	f023 0307 	bic.w	r3, r3, #7
 800557c:	3308      	adds	r3, #8
 800557e:	9303      	str	r3, [sp, #12]
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	443b      	add	r3, r7
 8005584:	9309      	str	r3, [sp, #36]	; 0x24
 8005586:	e767      	b.n	8005458 <_vfiprintf_r+0x94>
 8005588:	fb0c 3202 	mla	r2, ip, r2, r3
 800558c:	460c      	mov	r4, r1
 800558e:	2001      	movs	r0, #1
 8005590:	e7a5      	b.n	80054de <_vfiprintf_r+0x11a>
 8005592:	2300      	movs	r3, #0
 8005594:	3401      	adds	r4, #1
 8005596:	9305      	str	r3, [sp, #20]
 8005598:	4619      	mov	r1, r3
 800559a:	f04f 0c0a 	mov.w	ip, #10
 800559e:	4620      	mov	r0, r4
 80055a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055a4:	3a30      	subs	r2, #48	; 0x30
 80055a6:	2a09      	cmp	r2, #9
 80055a8:	d903      	bls.n	80055b2 <_vfiprintf_r+0x1ee>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0c5      	beq.n	800553a <_vfiprintf_r+0x176>
 80055ae:	9105      	str	r1, [sp, #20]
 80055b0:	e7c3      	b.n	800553a <_vfiprintf_r+0x176>
 80055b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80055b6:	4604      	mov	r4, r0
 80055b8:	2301      	movs	r3, #1
 80055ba:	e7f0      	b.n	800559e <_vfiprintf_r+0x1da>
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4b16      	ldr	r3, [pc, #88]	; (800561c <_vfiprintf_r+0x258>)
 80055c4:	a904      	add	r1, sp, #16
 80055c6:	4630      	mov	r0, r6
 80055c8:	f3af 8000 	nop.w
 80055cc:	4607      	mov	r7, r0
 80055ce:	1c78      	adds	r0, r7, #1
 80055d0:	d1d6      	bne.n	8005580 <_vfiprintf_r+0x1bc>
 80055d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d4:	07d9      	lsls	r1, r3, #31
 80055d6:	d405      	bmi.n	80055e4 <_vfiprintf_r+0x220>
 80055d8:	89ab      	ldrh	r3, [r5, #12]
 80055da:	059a      	lsls	r2, r3, #22
 80055dc:	d402      	bmi.n	80055e4 <_vfiprintf_r+0x220>
 80055de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055e0:	f7ff fe6b 	bl	80052ba <__retarget_lock_release_recursive>
 80055e4:	89ab      	ldrh	r3, [r5, #12]
 80055e6:	065b      	lsls	r3, r3, #25
 80055e8:	f53f af12 	bmi.w	8005410 <_vfiprintf_r+0x4c>
 80055ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ee:	e711      	b.n	8005414 <_vfiprintf_r+0x50>
 80055f0:	ab03      	add	r3, sp, #12
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	462a      	mov	r2, r5
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <_vfiprintf_r+0x258>)
 80055f8:	a904      	add	r1, sp, #16
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 f880 	bl	8005700 <_printf_i>
 8005600:	e7e4      	b.n	80055cc <_vfiprintf_r+0x208>
 8005602:	bf00      	nop
 8005604:	08005fa4 	.word	0x08005fa4
 8005608:	08005fc4 	.word	0x08005fc4
 800560c:	08005f84 	.word	0x08005f84
 8005610:	08005fe4 	.word	0x08005fe4
 8005614:	08005fee 	.word	0x08005fee
 8005618:	00000000 	.word	0x00000000
 800561c:	0800539f 	.word	0x0800539f
 8005620:	08005fea 	.word	0x08005fea

08005624 <_printf_common>:
 8005624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	4616      	mov	r6, r2
 800562a:	4699      	mov	r9, r3
 800562c:	688a      	ldr	r2, [r1, #8]
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005634:	4293      	cmp	r3, r2
 8005636:	bfb8      	it	lt
 8005638:	4613      	movlt	r3, r2
 800563a:	6033      	str	r3, [r6, #0]
 800563c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005640:	4607      	mov	r7, r0
 8005642:	460c      	mov	r4, r1
 8005644:	b10a      	cbz	r2, 800564a <_printf_common+0x26>
 8005646:	3301      	adds	r3, #1
 8005648:	6033      	str	r3, [r6, #0]
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	0699      	lsls	r1, r3, #26
 800564e:	bf42      	ittt	mi
 8005650:	6833      	ldrmi	r3, [r6, #0]
 8005652:	3302      	addmi	r3, #2
 8005654:	6033      	strmi	r3, [r6, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d106      	bne.n	800566c <_printf_common+0x48>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	6832      	ldr	r2, [r6, #0]
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	42ab      	cmp	r3, r5
 800566a:	dc26      	bgt.n	80056ba <_printf_common+0x96>
 800566c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005670:	1e13      	subs	r3, r2, #0
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	bf18      	it	ne
 8005676:	2301      	movne	r3, #1
 8005678:	0692      	lsls	r2, r2, #26
 800567a:	d42b      	bmi.n	80056d4 <_printf_common+0xb0>
 800567c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005680:	4649      	mov	r1, r9
 8005682:	4638      	mov	r0, r7
 8005684:	47c0      	blx	r8
 8005686:	3001      	adds	r0, #1
 8005688:	d01e      	beq.n	80056c8 <_printf_common+0xa4>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	68e5      	ldr	r5, [r4, #12]
 800568e:	6832      	ldr	r2, [r6, #0]
 8005690:	f003 0306 	and.w	r3, r3, #6
 8005694:	2b04      	cmp	r3, #4
 8005696:	bf08      	it	eq
 8005698:	1aad      	subeq	r5, r5, r2
 800569a:	68a3      	ldr	r3, [r4, #8]
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	bf0c      	ite	eq
 80056a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a4:	2500      	movne	r5, #0
 80056a6:	4293      	cmp	r3, r2
 80056a8:	bfc4      	itt	gt
 80056aa:	1a9b      	subgt	r3, r3, r2
 80056ac:	18ed      	addgt	r5, r5, r3
 80056ae:	2600      	movs	r6, #0
 80056b0:	341a      	adds	r4, #26
 80056b2:	42b5      	cmp	r5, r6
 80056b4:	d11a      	bne.n	80056ec <_printf_common+0xc8>
 80056b6:	2000      	movs	r0, #0
 80056b8:	e008      	b.n	80056cc <_printf_common+0xa8>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4652      	mov	r2, sl
 80056be:	4649      	mov	r1, r9
 80056c0:	4638      	mov	r0, r7
 80056c2:	47c0      	blx	r8
 80056c4:	3001      	adds	r0, #1
 80056c6:	d103      	bne.n	80056d0 <_printf_common+0xac>
 80056c8:	f04f 30ff 	mov.w	r0, #4294967295
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	3501      	adds	r5, #1
 80056d2:	e7c6      	b.n	8005662 <_printf_common+0x3e>
 80056d4:	18e1      	adds	r1, r4, r3
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	2030      	movs	r0, #48	; 0x30
 80056da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056de:	4422      	add	r2, r4
 80056e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056e8:	3302      	adds	r3, #2
 80056ea:	e7c7      	b.n	800567c <_printf_common+0x58>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4622      	mov	r2, r4
 80056f0:	4649      	mov	r1, r9
 80056f2:	4638      	mov	r0, r7
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0e6      	beq.n	80056c8 <_printf_common+0xa4>
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7d9      	b.n	80056b2 <_printf_common+0x8e>
	...

08005700 <_printf_i>:
 8005700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	460c      	mov	r4, r1
 8005706:	4691      	mov	r9, r2
 8005708:	7e27      	ldrb	r7, [r4, #24]
 800570a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800570c:	2f78      	cmp	r7, #120	; 0x78
 800570e:	4680      	mov	r8, r0
 8005710:	469a      	mov	sl, r3
 8005712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005716:	d807      	bhi.n	8005728 <_printf_i+0x28>
 8005718:	2f62      	cmp	r7, #98	; 0x62
 800571a:	d80a      	bhi.n	8005732 <_printf_i+0x32>
 800571c:	2f00      	cmp	r7, #0
 800571e:	f000 80d8 	beq.w	80058d2 <_printf_i+0x1d2>
 8005722:	2f58      	cmp	r7, #88	; 0x58
 8005724:	f000 80a3 	beq.w	800586e <_printf_i+0x16e>
 8005728:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800572c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005730:	e03a      	b.n	80057a8 <_printf_i+0xa8>
 8005732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005736:	2b15      	cmp	r3, #21
 8005738:	d8f6      	bhi.n	8005728 <_printf_i+0x28>
 800573a:	a001      	add	r0, pc, #4	; (adr r0, 8005740 <_printf_i+0x40>)
 800573c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005740:	08005799 	.word	0x08005799
 8005744:	080057ad 	.word	0x080057ad
 8005748:	08005729 	.word	0x08005729
 800574c:	08005729 	.word	0x08005729
 8005750:	08005729 	.word	0x08005729
 8005754:	08005729 	.word	0x08005729
 8005758:	080057ad 	.word	0x080057ad
 800575c:	08005729 	.word	0x08005729
 8005760:	08005729 	.word	0x08005729
 8005764:	08005729 	.word	0x08005729
 8005768:	08005729 	.word	0x08005729
 800576c:	080058b9 	.word	0x080058b9
 8005770:	080057dd 	.word	0x080057dd
 8005774:	0800589b 	.word	0x0800589b
 8005778:	08005729 	.word	0x08005729
 800577c:	08005729 	.word	0x08005729
 8005780:	080058db 	.word	0x080058db
 8005784:	08005729 	.word	0x08005729
 8005788:	080057dd 	.word	0x080057dd
 800578c:	08005729 	.word	0x08005729
 8005790:	08005729 	.word	0x08005729
 8005794:	080058a3 	.word	0x080058a3
 8005798:	680b      	ldr	r3, [r1, #0]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	600a      	str	r2, [r1, #0]
 80057a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0a3      	b.n	80058f4 <_printf_i+0x1f4>
 80057ac:	6825      	ldr	r5, [r4, #0]
 80057ae:	6808      	ldr	r0, [r1, #0]
 80057b0:	062e      	lsls	r6, r5, #24
 80057b2:	f100 0304 	add.w	r3, r0, #4
 80057b6:	d50a      	bpl.n	80057ce <_printf_i+0xce>
 80057b8:	6805      	ldr	r5, [r0, #0]
 80057ba:	600b      	str	r3, [r1, #0]
 80057bc:	2d00      	cmp	r5, #0
 80057be:	da03      	bge.n	80057c8 <_printf_i+0xc8>
 80057c0:	232d      	movs	r3, #45	; 0x2d
 80057c2:	426d      	negs	r5, r5
 80057c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c8:	485e      	ldr	r0, [pc, #376]	; (8005944 <_printf_i+0x244>)
 80057ca:	230a      	movs	r3, #10
 80057cc:	e019      	b.n	8005802 <_printf_i+0x102>
 80057ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057d2:	6805      	ldr	r5, [r0, #0]
 80057d4:	600b      	str	r3, [r1, #0]
 80057d6:	bf18      	it	ne
 80057d8:	b22d      	sxthne	r5, r5
 80057da:	e7ef      	b.n	80057bc <_printf_i+0xbc>
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	6825      	ldr	r5, [r4, #0]
 80057e0:	1d18      	adds	r0, r3, #4
 80057e2:	6008      	str	r0, [r1, #0]
 80057e4:	0628      	lsls	r0, r5, #24
 80057e6:	d501      	bpl.n	80057ec <_printf_i+0xec>
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	e002      	b.n	80057f2 <_printf_i+0xf2>
 80057ec:	0669      	lsls	r1, r5, #25
 80057ee:	d5fb      	bpl.n	80057e8 <_printf_i+0xe8>
 80057f0:	881d      	ldrh	r5, [r3, #0]
 80057f2:	4854      	ldr	r0, [pc, #336]	; (8005944 <_printf_i+0x244>)
 80057f4:	2f6f      	cmp	r7, #111	; 0x6f
 80057f6:	bf0c      	ite	eq
 80057f8:	2308      	moveq	r3, #8
 80057fa:	230a      	movne	r3, #10
 80057fc:	2100      	movs	r1, #0
 80057fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005802:	6866      	ldr	r6, [r4, #4]
 8005804:	60a6      	str	r6, [r4, #8]
 8005806:	2e00      	cmp	r6, #0
 8005808:	bfa2      	ittt	ge
 800580a:	6821      	ldrge	r1, [r4, #0]
 800580c:	f021 0104 	bicge.w	r1, r1, #4
 8005810:	6021      	strge	r1, [r4, #0]
 8005812:	b90d      	cbnz	r5, 8005818 <_printf_i+0x118>
 8005814:	2e00      	cmp	r6, #0
 8005816:	d04d      	beq.n	80058b4 <_printf_i+0x1b4>
 8005818:	4616      	mov	r6, r2
 800581a:	fbb5 f1f3 	udiv	r1, r5, r3
 800581e:	fb03 5711 	mls	r7, r3, r1, r5
 8005822:	5dc7      	ldrb	r7, [r0, r7]
 8005824:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005828:	462f      	mov	r7, r5
 800582a:	42bb      	cmp	r3, r7
 800582c:	460d      	mov	r5, r1
 800582e:	d9f4      	bls.n	800581a <_printf_i+0x11a>
 8005830:	2b08      	cmp	r3, #8
 8005832:	d10b      	bne.n	800584c <_printf_i+0x14c>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	07df      	lsls	r7, r3, #31
 8005838:	d508      	bpl.n	800584c <_printf_i+0x14c>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	6861      	ldr	r1, [r4, #4]
 800583e:	4299      	cmp	r1, r3
 8005840:	bfde      	ittt	le
 8005842:	2330      	movle	r3, #48	; 0x30
 8005844:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005848:	f106 36ff 	addle.w	r6, r6, #4294967295
 800584c:	1b92      	subs	r2, r2, r6
 800584e:	6122      	str	r2, [r4, #16]
 8005850:	f8cd a000 	str.w	sl, [sp]
 8005854:	464b      	mov	r3, r9
 8005856:	aa03      	add	r2, sp, #12
 8005858:	4621      	mov	r1, r4
 800585a:	4640      	mov	r0, r8
 800585c:	f7ff fee2 	bl	8005624 <_printf_common>
 8005860:	3001      	adds	r0, #1
 8005862:	d14c      	bne.n	80058fe <_printf_i+0x1fe>
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	b004      	add	sp, #16
 800586a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586e:	4835      	ldr	r0, [pc, #212]	; (8005944 <_printf_i+0x244>)
 8005870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	680e      	ldr	r6, [r1, #0]
 8005878:	061f      	lsls	r7, r3, #24
 800587a:	f856 5b04 	ldr.w	r5, [r6], #4
 800587e:	600e      	str	r6, [r1, #0]
 8005880:	d514      	bpl.n	80058ac <_printf_i+0x1ac>
 8005882:	07d9      	lsls	r1, r3, #31
 8005884:	bf44      	itt	mi
 8005886:	f043 0320 	orrmi.w	r3, r3, #32
 800588a:	6023      	strmi	r3, [r4, #0]
 800588c:	b91d      	cbnz	r5, 8005896 <_printf_i+0x196>
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	f023 0320 	bic.w	r3, r3, #32
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	2310      	movs	r3, #16
 8005898:	e7b0      	b.n	80057fc <_printf_i+0xfc>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f043 0320 	orr.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	2378      	movs	r3, #120	; 0x78
 80058a4:	4828      	ldr	r0, [pc, #160]	; (8005948 <_printf_i+0x248>)
 80058a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058aa:	e7e3      	b.n	8005874 <_printf_i+0x174>
 80058ac:	065e      	lsls	r6, r3, #25
 80058ae:	bf48      	it	mi
 80058b0:	b2ad      	uxthmi	r5, r5
 80058b2:	e7e6      	b.n	8005882 <_printf_i+0x182>
 80058b4:	4616      	mov	r6, r2
 80058b6:	e7bb      	b.n	8005830 <_printf_i+0x130>
 80058b8:	680b      	ldr	r3, [r1, #0]
 80058ba:	6826      	ldr	r6, [r4, #0]
 80058bc:	6960      	ldr	r0, [r4, #20]
 80058be:	1d1d      	adds	r5, r3, #4
 80058c0:	600d      	str	r5, [r1, #0]
 80058c2:	0635      	lsls	r5, r6, #24
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	d501      	bpl.n	80058cc <_printf_i+0x1cc>
 80058c8:	6018      	str	r0, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <_printf_i+0x1d2>
 80058cc:	0671      	lsls	r1, r6, #25
 80058ce:	d5fb      	bpl.n	80058c8 <_printf_i+0x1c8>
 80058d0:	8018      	strh	r0, [r3, #0]
 80058d2:	2300      	movs	r3, #0
 80058d4:	6123      	str	r3, [r4, #16]
 80058d6:	4616      	mov	r6, r2
 80058d8:	e7ba      	b.n	8005850 <_printf_i+0x150>
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	600a      	str	r2, [r1, #0]
 80058e0:	681e      	ldr	r6, [r3, #0]
 80058e2:	6862      	ldr	r2, [r4, #4]
 80058e4:	2100      	movs	r1, #0
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7fa fc82 	bl	80001f0 <memchr>
 80058ec:	b108      	cbz	r0, 80058f2 <_printf_i+0x1f2>
 80058ee:	1b80      	subs	r0, r0, r6
 80058f0:	6060      	str	r0, [r4, #4]
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	2300      	movs	r3, #0
 80058f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058fc:	e7a8      	b.n	8005850 <_printf_i+0x150>
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	4632      	mov	r2, r6
 8005902:	4649      	mov	r1, r9
 8005904:	4640      	mov	r0, r8
 8005906:	47d0      	blx	sl
 8005908:	3001      	adds	r0, #1
 800590a:	d0ab      	beq.n	8005864 <_printf_i+0x164>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	079b      	lsls	r3, r3, #30
 8005910:	d413      	bmi.n	800593a <_printf_i+0x23a>
 8005912:	68e0      	ldr	r0, [r4, #12]
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	4298      	cmp	r0, r3
 8005918:	bfb8      	it	lt
 800591a:	4618      	movlt	r0, r3
 800591c:	e7a4      	b.n	8005868 <_printf_i+0x168>
 800591e:	2301      	movs	r3, #1
 8005920:	4632      	mov	r2, r6
 8005922:	4649      	mov	r1, r9
 8005924:	4640      	mov	r0, r8
 8005926:	47d0      	blx	sl
 8005928:	3001      	adds	r0, #1
 800592a:	d09b      	beq.n	8005864 <_printf_i+0x164>
 800592c:	3501      	adds	r5, #1
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	9903      	ldr	r1, [sp, #12]
 8005932:	1a5b      	subs	r3, r3, r1
 8005934:	42ab      	cmp	r3, r5
 8005936:	dcf2      	bgt.n	800591e <_printf_i+0x21e>
 8005938:	e7eb      	b.n	8005912 <_printf_i+0x212>
 800593a:	2500      	movs	r5, #0
 800593c:	f104 0619 	add.w	r6, r4, #25
 8005940:	e7f5      	b.n	800592e <_printf_i+0x22e>
 8005942:	bf00      	nop
 8005944:	08005ff5 	.word	0x08005ff5
 8005948:	08006006 	.word	0x08006006

0800594c <_sbrk_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d06      	ldr	r5, [pc, #24]	; (8005968 <_sbrk_r+0x1c>)
 8005950:	2300      	movs	r3, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	602b      	str	r3, [r5, #0]
 8005958:	f7fc f932 	bl	8001bc0 <_sbrk>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_sbrk_r+0x1a>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b103      	cbz	r3, 8005966 <_sbrk_r+0x1a>
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	20000280 	.word	0x20000280

0800596c <__sread>:
 800596c:	b510      	push	{r4, lr}
 800596e:	460c      	mov	r4, r1
 8005970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005974:	f000 fab4 	bl	8005ee0 <_read_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	bfab      	itete	ge
 800597c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800597e:	89a3      	ldrhlt	r3, [r4, #12]
 8005980:	181b      	addge	r3, r3, r0
 8005982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005986:	bfac      	ite	ge
 8005988:	6563      	strge	r3, [r4, #84]	; 0x54
 800598a:	81a3      	strhlt	r3, [r4, #12]
 800598c:	bd10      	pop	{r4, pc}

0800598e <__swrite>:
 800598e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005992:	461f      	mov	r7, r3
 8005994:	898b      	ldrh	r3, [r1, #12]
 8005996:	05db      	lsls	r3, r3, #23
 8005998:	4605      	mov	r5, r0
 800599a:	460c      	mov	r4, r1
 800599c:	4616      	mov	r6, r2
 800599e:	d505      	bpl.n	80059ac <__swrite+0x1e>
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	2302      	movs	r3, #2
 80059a6:	2200      	movs	r2, #0
 80059a8:	f000 f9c8 	bl	8005d3c <_lseek_r>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b6:	81a3      	strh	r3, [r4, #12]
 80059b8:	4632      	mov	r2, r6
 80059ba:	463b      	mov	r3, r7
 80059bc:	4628      	mov	r0, r5
 80059be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	f000 b869 	b.w	8005a98 <_write_r>

080059c6 <__sseek>:
 80059c6:	b510      	push	{r4, lr}
 80059c8:	460c      	mov	r4, r1
 80059ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ce:	f000 f9b5 	bl	8005d3c <_lseek_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	bf15      	itete	ne
 80059d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80059da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059e2:	81a3      	strheq	r3, [r4, #12]
 80059e4:	bf18      	it	ne
 80059e6:	81a3      	strhne	r3, [r4, #12]
 80059e8:	bd10      	pop	{r4, pc}

080059ea <__sclose>:
 80059ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ee:	f000 b8d3 	b.w	8005b98 <_close_r>
	...

080059f4 <__swbuf_r>:
 80059f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f6:	460e      	mov	r6, r1
 80059f8:	4614      	mov	r4, r2
 80059fa:	4605      	mov	r5, r0
 80059fc:	b118      	cbz	r0, 8005a06 <__swbuf_r+0x12>
 80059fe:	6983      	ldr	r3, [r0, #24]
 8005a00:	b90b      	cbnz	r3, 8005a06 <__swbuf_r+0x12>
 8005a02:	f7ff fbbb 	bl	800517c <__sinit>
 8005a06:	4b21      	ldr	r3, [pc, #132]	; (8005a8c <__swbuf_r+0x98>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	d12b      	bne.n	8005a64 <__swbuf_r+0x70>
 8005a0c:	686c      	ldr	r4, [r5, #4]
 8005a0e:	69a3      	ldr	r3, [r4, #24]
 8005a10:	60a3      	str	r3, [r4, #8]
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	071a      	lsls	r2, r3, #28
 8005a16:	d52f      	bpl.n	8005a78 <__swbuf_r+0x84>
 8005a18:	6923      	ldr	r3, [r4, #16]
 8005a1a:	b36b      	cbz	r3, 8005a78 <__swbuf_r+0x84>
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	1ac0      	subs	r0, r0, r3
 8005a22:	6963      	ldr	r3, [r4, #20]
 8005a24:	b2f6      	uxtb	r6, r6
 8005a26:	4283      	cmp	r3, r0
 8005a28:	4637      	mov	r7, r6
 8005a2a:	dc04      	bgt.n	8005a36 <__swbuf_r+0x42>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 f948 	bl	8005cc4 <_fflush_r>
 8005a34:	bb30      	cbnz	r0, 8005a84 <__swbuf_r+0x90>
 8005a36:	68a3      	ldr	r3, [r4, #8]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	60a3      	str	r3, [r4, #8]
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	6022      	str	r2, [r4, #0]
 8005a42:	701e      	strb	r6, [r3, #0]
 8005a44:	6963      	ldr	r3, [r4, #20]
 8005a46:	3001      	adds	r0, #1
 8005a48:	4283      	cmp	r3, r0
 8005a4a:	d004      	beq.n	8005a56 <__swbuf_r+0x62>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	07db      	lsls	r3, r3, #31
 8005a50:	d506      	bpl.n	8005a60 <__swbuf_r+0x6c>
 8005a52:	2e0a      	cmp	r6, #10
 8005a54:	d104      	bne.n	8005a60 <__swbuf_r+0x6c>
 8005a56:	4621      	mov	r1, r4
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f000 f933 	bl	8005cc4 <_fflush_r>
 8005a5e:	b988      	cbnz	r0, 8005a84 <__swbuf_r+0x90>
 8005a60:	4638      	mov	r0, r7
 8005a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a64:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <__swbuf_r+0x9c>)
 8005a66:	429c      	cmp	r4, r3
 8005a68:	d101      	bne.n	8005a6e <__swbuf_r+0x7a>
 8005a6a:	68ac      	ldr	r4, [r5, #8]
 8005a6c:	e7cf      	b.n	8005a0e <__swbuf_r+0x1a>
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <__swbuf_r+0xa0>)
 8005a70:	429c      	cmp	r4, r3
 8005a72:	bf08      	it	eq
 8005a74:	68ec      	ldreq	r4, [r5, #12]
 8005a76:	e7ca      	b.n	8005a0e <__swbuf_r+0x1a>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f81e 	bl	8005abc <__swsetup_r>
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d0cb      	beq.n	8005a1c <__swbuf_r+0x28>
 8005a84:	f04f 37ff 	mov.w	r7, #4294967295
 8005a88:	e7ea      	b.n	8005a60 <__swbuf_r+0x6c>
 8005a8a:	bf00      	nop
 8005a8c:	08005fa4 	.word	0x08005fa4
 8005a90:	08005fc4 	.word	0x08005fc4
 8005a94:	08005f84 	.word	0x08005f84

08005a98 <_write_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d07      	ldr	r5, [pc, #28]	; (8005ab8 <_write_r+0x20>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4608      	mov	r0, r1
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	602a      	str	r2, [r5, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f7fc f839 	bl	8001b1e <_write>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_write_r+0x1e>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_write_r+0x1e>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	20000280 	.word	0x20000280

08005abc <__swsetup_r>:
 8005abc:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <__swsetup_r+0xcc>)
 8005abe:	b570      	push	{r4, r5, r6, lr}
 8005ac0:	681d      	ldr	r5, [r3, #0]
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	b125      	cbz	r5, 8005ad2 <__swsetup_r+0x16>
 8005ac8:	69ab      	ldr	r3, [r5, #24]
 8005aca:	b913      	cbnz	r3, 8005ad2 <__swsetup_r+0x16>
 8005acc:	4628      	mov	r0, r5
 8005ace:	f7ff fb55 	bl	800517c <__sinit>
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <__swsetup_r+0xd0>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	d10f      	bne.n	8005af8 <__swsetup_r+0x3c>
 8005ad8:	686c      	ldr	r4, [r5, #4]
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ae0:	0719      	lsls	r1, r3, #28
 8005ae2:	d42c      	bmi.n	8005b3e <__swsetup_r+0x82>
 8005ae4:	06dd      	lsls	r5, r3, #27
 8005ae6:	d411      	bmi.n	8005b0c <__swsetup_r+0x50>
 8005ae8:	2309      	movs	r3, #9
 8005aea:	6033      	str	r3, [r6, #0]
 8005aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005af0:	81a3      	strh	r3, [r4, #12]
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	e03e      	b.n	8005b76 <__swsetup_r+0xba>
 8005af8:	4b25      	ldr	r3, [pc, #148]	; (8005b90 <__swsetup_r+0xd4>)
 8005afa:	429c      	cmp	r4, r3
 8005afc:	d101      	bne.n	8005b02 <__swsetup_r+0x46>
 8005afe:	68ac      	ldr	r4, [r5, #8]
 8005b00:	e7eb      	b.n	8005ada <__swsetup_r+0x1e>
 8005b02:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <__swsetup_r+0xd8>)
 8005b04:	429c      	cmp	r4, r3
 8005b06:	bf08      	it	eq
 8005b08:	68ec      	ldreq	r4, [r5, #12]
 8005b0a:	e7e6      	b.n	8005ada <__swsetup_r+0x1e>
 8005b0c:	0758      	lsls	r0, r3, #29
 8005b0e:	d512      	bpl.n	8005b36 <__swsetup_r+0x7a>
 8005b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b12:	b141      	cbz	r1, 8005b26 <__swsetup_r+0x6a>
 8005b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	d002      	beq.n	8005b22 <__swsetup_r+0x66>
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f000 f98f 	bl	8005e40 <_free_r>
 8005b22:	2300      	movs	r3, #0
 8005b24:	6363      	str	r3, [r4, #52]	; 0x34
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	f043 0308 	orr.w	r3, r3, #8
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	b94b      	cbnz	r3, 8005b56 <__swsetup_r+0x9a>
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4c:	d003      	beq.n	8005b56 <__swsetup_r+0x9a>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f929 	bl	8005da8 <__smakebuf_r>
 8005b56:	89a0      	ldrh	r0, [r4, #12]
 8005b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b5c:	f010 0301 	ands.w	r3, r0, #1
 8005b60:	d00a      	beq.n	8005b78 <__swsetup_r+0xbc>
 8005b62:	2300      	movs	r3, #0
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	6963      	ldr	r3, [r4, #20]
 8005b68:	425b      	negs	r3, r3
 8005b6a:	61a3      	str	r3, [r4, #24]
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	b943      	cbnz	r3, 8005b82 <__swsetup_r+0xc6>
 8005b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b74:	d1ba      	bne.n	8005aec <__swsetup_r+0x30>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	0781      	lsls	r1, r0, #30
 8005b7a:	bf58      	it	pl
 8005b7c:	6963      	ldrpl	r3, [r4, #20]
 8005b7e:	60a3      	str	r3, [r4, #8]
 8005b80:	e7f4      	b.n	8005b6c <__swsetup_r+0xb0>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e7f7      	b.n	8005b76 <__swsetup_r+0xba>
 8005b86:	bf00      	nop
 8005b88:	2000000c 	.word	0x2000000c
 8005b8c:	08005fa4 	.word	0x08005fa4
 8005b90:	08005fc4 	.word	0x08005fc4
 8005b94:	08005f84 	.word	0x08005f84

08005b98 <_close_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	; (8005bb4 <_close_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fb ffd7 	bl	8001b56 <_close>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_close_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_close_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20000280 	.word	0x20000280

08005bb8 <__sflush_r>:
 8005bb8:	898a      	ldrh	r2, [r1, #12]
 8005bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	0710      	lsls	r0, r2, #28
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	d458      	bmi.n	8005c78 <__sflush_r+0xc0>
 8005bc6:	684b      	ldr	r3, [r1, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dc05      	bgt.n	8005bd8 <__sflush_r+0x20>
 8005bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dc02      	bgt.n	8005bd8 <__sflush_r+0x20>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bda:	2e00      	cmp	r6, #0
 8005bdc:	d0f9      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005bde:	2300      	movs	r3, #0
 8005be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be4:	682f      	ldr	r7, [r5, #0]
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	d032      	beq.n	8005c50 <__sflush_r+0x98>
 8005bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bec:	89a3      	ldrh	r3, [r4, #12]
 8005bee:	075a      	lsls	r2, r3, #29
 8005bf0:	d505      	bpl.n	8005bfe <__sflush_r+0x46>
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	1ac0      	subs	r0, r0, r3
 8005bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf8:	b10b      	cbz	r3, 8005bfe <__sflush_r+0x46>
 8005bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfc:	1ac0      	subs	r0, r0, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4602      	mov	r2, r0
 8005c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c04:	6a21      	ldr	r1, [r4, #32]
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b0      	blx	r6
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	d106      	bne.n	8005c1e <__sflush_r+0x66>
 8005c10:	6829      	ldr	r1, [r5, #0]
 8005c12:	291d      	cmp	r1, #29
 8005c14:	d82c      	bhi.n	8005c70 <__sflush_r+0xb8>
 8005c16:	4a2a      	ldr	r2, [pc, #168]	; (8005cc0 <__sflush_r+0x108>)
 8005c18:	40ca      	lsrs	r2, r1
 8005c1a:	07d6      	lsls	r6, r2, #31
 8005c1c:	d528      	bpl.n	8005c70 <__sflush_r+0xb8>
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6062      	str	r2, [r4, #4]
 8005c22:	04d9      	lsls	r1, r3, #19
 8005c24:	6922      	ldr	r2, [r4, #16]
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	d504      	bpl.n	8005c34 <__sflush_r+0x7c>
 8005c2a:	1c42      	adds	r2, r0, #1
 8005c2c:	d101      	bne.n	8005c32 <__sflush_r+0x7a>
 8005c2e:	682b      	ldr	r3, [r5, #0]
 8005c30:	b903      	cbnz	r3, 8005c34 <__sflush_r+0x7c>
 8005c32:	6560      	str	r0, [r4, #84]	; 0x54
 8005c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c36:	602f      	str	r7, [r5, #0]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d0ca      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c40:	4299      	cmp	r1, r3
 8005c42:	d002      	beq.n	8005c4a <__sflush_r+0x92>
 8005c44:	4628      	mov	r0, r5
 8005c46:	f000 f8fb 	bl	8005e40 <_free_r>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4e:	e7c1      	b.n	8005bd4 <__sflush_r+0x1c>
 8005c50:	6a21      	ldr	r1, [r4, #32]
 8005c52:	2301      	movs	r3, #1
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b0      	blx	r6
 8005c58:	1c41      	adds	r1, r0, #1
 8005c5a:	d1c7      	bne.n	8005bec <__sflush_r+0x34>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0c4      	beq.n	8005bec <__sflush_r+0x34>
 8005c62:	2b1d      	cmp	r3, #29
 8005c64:	d001      	beq.n	8005c6a <__sflush_r+0xb2>
 8005c66:	2b16      	cmp	r3, #22
 8005c68:	d101      	bne.n	8005c6e <__sflush_r+0xb6>
 8005c6a:	602f      	str	r7, [r5, #0]
 8005c6c:	e7b1      	b.n	8005bd2 <__sflush_r+0x1a>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	e7ad      	b.n	8005bd4 <__sflush_r+0x1c>
 8005c78:	690f      	ldr	r7, [r1, #16]
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	d0a9      	beq.n	8005bd2 <__sflush_r+0x1a>
 8005c7e:	0793      	lsls	r3, r2, #30
 8005c80:	680e      	ldr	r6, [r1, #0]
 8005c82:	bf08      	it	eq
 8005c84:	694b      	ldreq	r3, [r1, #20]
 8005c86:	600f      	str	r7, [r1, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	eba6 0807 	sub.w	r8, r6, r7
 8005c90:	608b      	str	r3, [r1, #8]
 8005c92:	f1b8 0f00 	cmp.w	r8, #0
 8005c96:	dd9c      	ble.n	8005bd2 <__sflush_r+0x1a>
 8005c98:	6a21      	ldr	r1, [r4, #32]
 8005c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c9c:	4643      	mov	r3, r8
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b0      	blx	r6
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	dc06      	bgt.n	8005cb6 <__sflush_r+0xfe>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	e78e      	b.n	8005bd4 <__sflush_r+0x1c>
 8005cb6:	4407      	add	r7, r0
 8005cb8:	eba8 0800 	sub.w	r8, r8, r0
 8005cbc:	e7e9      	b.n	8005c92 <__sflush_r+0xda>
 8005cbe:	bf00      	nop
 8005cc0:	20400001 	.word	0x20400001

08005cc4 <_fflush_r>:
 8005cc4:	b538      	push	{r3, r4, r5, lr}
 8005cc6:	690b      	ldr	r3, [r1, #16]
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460c      	mov	r4, r1
 8005ccc:	b913      	cbnz	r3, 8005cd4 <_fflush_r+0x10>
 8005cce:	2500      	movs	r5, #0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	b118      	cbz	r0, 8005cde <_fflush_r+0x1a>
 8005cd6:	6983      	ldr	r3, [r0, #24]
 8005cd8:	b90b      	cbnz	r3, 8005cde <_fflush_r+0x1a>
 8005cda:	f7ff fa4f 	bl	800517c <__sinit>
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <_fflush_r+0x6c>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d11b      	bne.n	8005d1c <_fflush_r+0x58>
 8005ce4:	686c      	ldr	r4, [r5, #4]
 8005ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ef      	beq.n	8005cce <_fflush_r+0xa>
 8005cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf0:	07d0      	lsls	r0, r2, #31
 8005cf2:	d404      	bmi.n	8005cfe <_fflush_r+0x3a>
 8005cf4:	0599      	lsls	r1, r3, #22
 8005cf6:	d402      	bmi.n	8005cfe <_fflush_r+0x3a>
 8005cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfa:	f7ff fadd 	bl	80052b8 <__retarget_lock_acquire_recursive>
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4621      	mov	r1, r4
 8005d02:	f7ff ff59 	bl	8005bb8 <__sflush_r>
 8005d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d08:	07da      	lsls	r2, r3, #31
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	d4e0      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	059b      	lsls	r3, r3, #22
 8005d12:	d4dd      	bmi.n	8005cd0 <_fflush_r+0xc>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f7ff fad0 	bl	80052ba <__retarget_lock_release_recursive>
 8005d1a:	e7d9      	b.n	8005cd0 <_fflush_r+0xc>
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <_fflush_r+0x70>)
 8005d1e:	429c      	cmp	r4, r3
 8005d20:	d101      	bne.n	8005d26 <_fflush_r+0x62>
 8005d22:	68ac      	ldr	r4, [r5, #8]
 8005d24:	e7df      	b.n	8005ce6 <_fflush_r+0x22>
 8005d26:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <_fflush_r+0x74>)
 8005d28:	429c      	cmp	r4, r3
 8005d2a:	bf08      	it	eq
 8005d2c:	68ec      	ldreq	r4, [r5, #12]
 8005d2e:	e7da      	b.n	8005ce6 <_fflush_r+0x22>
 8005d30:	08005fa4 	.word	0x08005fa4
 8005d34:	08005fc4 	.word	0x08005fc4
 8005d38:	08005f84 	.word	0x08005f84

08005d3c <_lseek_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	; (8005d5c <_lseek_r+0x20>)
 8005d40:	4604      	mov	r4, r0
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fb ff2a 	bl	8001ba4 <_lseek>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_lseek_r+0x1e>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_lseek_r+0x1e>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20000280 	.word	0x20000280

08005d60 <__swhatbuf_r>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	460e      	mov	r6, r1
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	b096      	sub	sp, #88	; 0x58
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	da07      	bge.n	8005d82 <__swhatbuf_r+0x22>
 8005d72:	2300      	movs	r3, #0
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	89b3      	ldrh	r3, [r6, #12]
 8005d78:	061a      	lsls	r2, r3, #24
 8005d7a:	d410      	bmi.n	8005d9e <__swhatbuf_r+0x3e>
 8005d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d80:	e00e      	b.n	8005da0 <__swhatbuf_r+0x40>
 8005d82:	466a      	mov	r2, sp
 8005d84:	f000 f8be 	bl	8005f04 <_fstat_r>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	dbf2      	blt.n	8005d72 <__swhatbuf_r+0x12>
 8005d8c:	9a01      	ldr	r2, [sp, #4]
 8005d8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d96:	425a      	negs	r2, r3
 8005d98:	415a      	adcs	r2, r3
 8005d9a:	602a      	str	r2, [r5, #0]
 8005d9c:	e7ee      	b.n	8005d7c <__swhatbuf_r+0x1c>
 8005d9e:	2340      	movs	r3, #64	; 0x40
 8005da0:	2000      	movs	r0, #0
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	b016      	add	sp, #88	; 0x58
 8005da6:	bd70      	pop	{r4, r5, r6, pc}

08005da8 <__smakebuf_r>:
 8005da8:	898b      	ldrh	r3, [r1, #12]
 8005daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dac:	079d      	lsls	r5, r3, #30
 8005dae:	4606      	mov	r6, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	d507      	bpl.n	8005dc4 <__smakebuf_r+0x1c>
 8005db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	6123      	str	r3, [r4, #16]
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	6163      	str	r3, [r4, #20]
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	ab01      	add	r3, sp, #4
 8005dc6:	466a      	mov	r2, sp
 8005dc8:	f7ff ffca 	bl	8005d60 <__swhatbuf_r>
 8005dcc:	9900      	ldr	r1, [sp, #0]
 8005dce:	4605      	mov	r5, r0
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7ff fa73 	bl	80052bc <_malloc_r>
 8005dd6:	b948      	cbnz	r0, 8005dec <__smakebuf_r+0x44>
 8005dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ddc:	059a      	lsls	r2, r3, #22
 8005dde:	d4ef      	bmi.n	8005dc0 <__smakebuf_r+0x18>
 8005de0:	f023 0303 	bic.w	r3, r3, #3
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	81a3      	strh	r3, [r4, #12]
 8005dea:	e7e3      	b.n	8005db4 <__smakebuf_r+0xc>
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <__smakebuf_r+0x7c>)
 8005dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	6020      	str	r0, [r4, #0]
 8005df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	9b00      	ldr	r3, [sp, #0]
 8005dfc:	6163      	str	r3, [r4, #20]
 8005dfe:	9b01      	ldr	r3, [sp, #4]
 8005e00:	6120      	str	r0, [r4, #16]
 8005e02:	b15b      	cbz	r3, 8005e1c <__smakebuf_r+0x74>
 8005e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f000 f88d 	bl	8005f28 <_isatty_r>
 8005e0e:	b128      	cbz	r0, 8005e1c <__smakebuf_r+0x74>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	89a0      	ldrh	r0, [r4, #12]
 8005e1e:	4305      	orrs	r5, r0
 8005e20:	81a5      	strh	r5, [r4, #12]
 8005e22:	e7cd      	b.n	8005dc0 <__smakebuf_r+0x18>
 8005e24:	08005115 	.word	0x08005115

08005e28 <__malloc_lock>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__malloc_lock+0x8>)
 8005e2a:	f7ff ba45 	b.w	80052b8 <__retarget_lock_acquire_recursive>
 8005e2e:	bf00      	nop
 8005e30:	20000278 	.word	0x20000278

08005e34 <__malloc_unlock>:
 8005e34:	4801      	ldr	r0, [pc, #4]	; (8005e3c <__malloc_unlock+0x8>)
 8005e36:	f7ff ba40 	b.w	80052ba <__retarget_lock_release_recursive>
 8005e3a:	bf00      	nop
 8005e3c:	20000278 	.word	0x20000278

08005e40 <_free_r>:
 8005e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e42:	2900      	cmp	r1, #0
 8005e44:	d048      	beq.n	8005ed8 <_free_r+0x98>
 8005e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e4a:	9001      	str	r0, [sp, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e52:	bfb8      	it	lt
 8005e54:	18e4      	addlt	r4, r4, r3
 8005e56:	f7ff ffe7 	bl	8005e28 <__malloc_lock>
 8005e5a:	4a20      	ldr	r2, [pc, #128]	; (8005edc <_free_r+0x9c>)
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	4615      	mov	r5, r2
 8005e62:	b933      	cbnz	r3, 8005e72 <_free_r+0x32>
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	6014      	str	r4, [r2, #0]
 8005e68:	b003      	add	sp, #12
 8005e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e6e:	f7ff bfe1 	b.w	8005e34 <__malloc_unlock>
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	d90b      	bls.n	8005e8e <_free_r+0x4e>
 8005e76:	6821      	ldr	r1, [r4, #0]
 8005e78:	1862      	adds	r2, r4, r1
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	bf04      	itt	eq
 8005e7e:	681a      	ldreq	r2, [r3, #0]
 8005e80:	685b      	ldreq	r3, [r3, #4]
 8005e82:	6063      	str	r3, [r4, #4]
 8005e84:	bf04      	itt	eq
 8005e86:	1852      	addeq	r2, r2, r1
 8005e88:	6022      	streq	r2, [r4, #0]
 8005e8a:	602c      	str	r4, [r5, #0]
 8005e8c:	e7ec      	b.n	8005e68 <_free_r+0x28>
 8005e8e:	461a      	mov	r2, r3
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b10b      	cbz	r3, 8005e98 <_free_r+0x58>
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d9fa      	bls.n	8005e8e <_free_r+0x4e>
 8005e98:	6811      	ldr	r1, [r2, #0]
 8005e9a:	1855      	adds	r5, r2, r1
 8005e9c:	42a5      	cmp	r5, r4
 8005e9e:	d10b      	bne.n	8005eb8 <_free_r+0x78>
 8005ea0:	6824      	ldr	r4, [r4, #0]
 8005ea2:	4421      	add	r1, r4
 8005ea4:	1854      	adds	r4, r2, r1
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	6011      	str	r1, [r2, #0]
 8005eaa:	d1dd      	bne.n	8005e68 <_free_r+0x28>
 8005eac:	681c      	ldr	r4, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	6053      	str	r3, [r2, #4]
 8005eb2:	4421      	add	r1, r4
 8005eb4:	6011      	str	r1, [r2, #0]
 8005eb6:	e7d7      	b.n	8005e68 <_free_r+0x28>
 8005eb8:	d902      	bls.n	8005ec0 <_free_r+0x80>
 8005eba:	230c      	movs	r3, #12
 8005ebc:	6003      	str	r3, [r0, #0]
 8005ebe:	e7d3      	b.n	8005e68 <_free_r+0x28>
 8005ec0:	6825      	ldr	r5, [r4, #0]
 8005ec2:	1961      	adds	r1, r4, r5
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	bf04      	itt	eq
 8005ec8:	6819      	ldreq	r1, [r3, #0]
 8005eca:	685b      	ldreq	r3, [r3, #4]
 8005ecc:	6063      	str	r3, [r4, #4]
 8005ece:	bf04      	itt	eq
 8005ed0:	1949      	addeq	r1, r1, r5
 8005ed2:	6021      	streq	r1, [r4, #0]
 8005ed4:	6054      	str	r4, [r2, #4]
 8005ed6:	e7c7      	b.n	8005e68 <_free_r+0x28>
 8005ed8:	b003      	add	sp, #12
 8005eda:	bd30      	pop	{r4, r5, pc}
 8005edc:	20000090 	.word	0x20000090

08005ee0 <_read_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	; (8005f00 <_read_r+0x20>)
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	4608      	mov	r0, r1
 8005ee8:	4611      	mov	r1, r2
 8005eea:	2200      	movs	r2, #0
 8005eec:	602a      	str	r2, [r5, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f7fb fdf8 	bl	8001ae4 <_read>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_read_r+0x1e>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_read_r+0x1e>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	20000280 	.word	0x20000280

08005f04 <_fstat_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	; (8005f24 <_fstat_r+0x20>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	f7fb fe2c 	bl	8001b6e <_fstat>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d102      	bne.n	8005f20 <_fstat_r+0x1c>
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	b103      	cbz	r3, 8005f20 <_fstat_r+0x1c>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	bd38      	pop	{r3, r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	20000280 	.word	0x20000280

08005f28 <_isatty_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4d06      	ldr	r5, [pc, #24]	; (8005f44 <_isatty_r+0x1c>)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	f7fb fe2b 	bl	8001b8e <_isatty>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_isatty_r+0x1a>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_isatty_r+0x1a>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000280 	.word	0x20000280

08005f48 <_init>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr

08005f54 <_fini>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr
